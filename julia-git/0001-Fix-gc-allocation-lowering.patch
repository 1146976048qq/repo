From f868a88003047d4091185410d5940ed0d61fd7c0 Mon Sep 17 00:00:00 2001
From: Yichao Yu <yyc1992@gmail.com>
Date: Tue, 24 Oct 2017 22:12:11 -0400
Subject: [PATCH] Fix gc allocation lowering

We changed the function signature so it's not safe to copy all attributes and metadata.
In particular, this triggers an llvm assertion when the type (3rd) argument is marked `nonnull`.

Also add `nonnull` attribute to the return value.
---
 src/llvm-late-gc-lowering.cpp | 44 ++++++++++++++++---------------------------
 1 file changed, 16 insertions(+), 28 deletions(-)

diff --git a/src/llvm-late-gc-lowering.cpp b/src/llvm-late-gc-lowering.cpp
index 0bbe1241aa..5b8196b953 100644
--- a/src/llvm-late-gc-lowering.cpp
+++ b/src/llvm-late-gc-lowering.cpp
@@ -347,6 +347,16 @@ namespace llvm {
     void initializeLateLowerGCFramePass(PassRegistry &Registry);
 }
 
+template<typename T>
+static void addReturnAttr(T *f, Attribute::AttrKind Kind)
+{
+#if JL_LLVM_VERSION >= 50000
+    f->addAttribute(AttributeList::ReturnIndex, Kind);
+#else
+    f->addAttribute(AttributeSet::ReturnIndex, Kind);
+#endif
+}
+
 extern std::pair<MDNode*,MDNode*> tbaa_make_child(const char *name, MDNode *parent=nullptr, bool isConstant=false);
 struct LateLowerGCFrame: public FunctionPass {
     static char ID;
@@ -1545,21 +1555,6 @@ void LateLowerGCFrame::PopGCFrame(AllocaInst *gcframe, Instruction *InsertBefore
     inst->setMetadata(llvm::LLVMContext::MD_tbaa, tbaa_gcframe);
 }
 
-static void copyMetadata(Instruction *dest, const Instruction *src)
-{
-#if JL_LLVM_VERSION < 40000
-    if (!src->hasMetadata())
-        return;
-    SmallVector<std::pair<unsigned,MDNode*>,4> TheMDs;
-    src->getAllMetadataOtherThanDebugLoc(TheMDs);
-    for (const auto &MD : TheMDs)
-        dest->setMetadata(MD.first, MD.second);
-    dest->setDebugLoc(src->getDebugLoc());
-#else
-    dest->copyMetadata(*src);
-#endif
-}
-
 // Size of T is assumed to be `sizeof(void*)`
 Value *LateLowerGCFrame::EmitTagPtr(IRBuilder<> &builder, Type *T, Value *V)
 {
@@ -1680,9 +1675,9 @@ bool LateLowerGCFrame::CleanupIR(Function &F, State *S) {
                     auto pool_osize = ConstantInt::get(T_int32, osize);
                     newI = builder.CreateCall(pool_alloc_func, {ptls, pool_offs, pool_osize});
                 }
-                newI->setAttributes(CI->getAttributes());
+                addReturnAttr(newI, Attribute::NoAlias);
+                addReturnAttr(newI, Attribute::NonNull);
                 newI->takeName(CI);
-                copyMetadata(newI, CI);
                 auto derived = builder.CreateAddrSpaceCast(newI, T_pjlvalue_der);
                 auto cast = builder.CreateBitCast(derived, T_ppjlvalue_der);
                 auto tagaddr = builder.CreateGEP(T_prjlvalue, cast,
@@ -1962,15 +1957,6 @@ void LateLowerGCFrame::PlaceRootsAndUpdateCalls(std::vector<int> &Colors, State
     }
 }
 
-static void addRetNoAlias(Function *F)
-{
-#if JL_LLVM_VERSION >= 50000
-    F->addAttribute(AttributeList::ReturnIndex, Attribute::NoAlias);
-#else
-    F->addAttribute(AttributeSet::ReturnIndex, Attribute::NoAlias);
-#endif
-}
-
 bool LateLowerGCFrame::doInitialization(Module &M) {
     ptls_getter = M.getFunction("julia.ptls_states");
     gc_flush_func = M.getFunction("julia.gcroot_flush");
@@ -2006,7 +1992,8 @@ bool LateLowerGCFrame::doInitialization(Module &M) {
             args.push_back(T_int32);
             pool_alloc_func = Function::Create(FunctionType::get(T_prjlvalue, args, false),
                                                Function::ExternalLinkage, "jl_gc_pool_alloc", &M);
-            addRetNoAlias(pool_alloc_func);
+            addReturnAttr(pool_alloc_func, Attribute::NoAlias);
+            addReturnAttr(pool_alloc_func, Attribute::NonNull);
         }
         if (!(big_alloc_func = M.getFunction("jl_gc_big_alloc"))) {
             std::vector<Type*> args(0);
@@ -2014,7 +2001,8 @@ bool LateLowerGCFrame::doInitialization(Module &M) {
             args.push_back(T_size);
             big_alloc_func = Function::Create(FunctionType::get(T_prjlvalue, args, false),
                                          Function::ExternalLinkage, "jl_gc_big_alloc", &M);
-            addRetNoAlias(big_alloc_func);
+            addReturnAttr(big_alloc_func, Attribute::NoAlias);
+            addReturnAttr(big_alloc_func, Attribute::NonNull);
         }
         auto T_jlvalue = cast<PointerType>(T_prjlvalue)->getElementType();
         T_pjlvalue = PointerType::get(T_jlvalue, 0);
-- 
2.14.3

