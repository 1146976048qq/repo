From 132d7ba14dd5088d2f789f1c4c65dc0ba9273d71 Mon Sep 17 00:00:00 2001
From: Yichao Yu <yyc1992@gmail.com>
Date: Sun, 2 Jul 2017 05:12:13 -0400
Subject: [PATCH 6/9] Use processor.cpp API in disasm.cpp

Remove ARM specific workaround and do not assume the CPU name contains all
information about the code.
This should now allow disassemble of code that's not required by the base ISA
or even not supported on the current CPU.
This is especially important on ARM, which does not disassemble many armv7 instructions previously.
---
 src/Makefile   |  2 +-
 src/disasm.cpp | 20 +++++++-------------
 2 files changed, 8 insertions(+), 14 deletions(-)

diff --git a/src/Makefile b/src/Makefile
index 99f84cdd25..fc8d65c341 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -186,7 +186,7 @@ $(BUILDDIR)/codegen.o $(BUILDDIR)/codegen.dbg.obj: $(addprefix $(SRCDIR)/,\
 $(BUILDDIR)/processor.o $(BUILDDIR)/processor.dbg.obj: $(addprefix $(SRCDIR)/,processor_*.cpp processor.h features_*.h)
 $(BUILDDIR)/anticodegen.o $(BUILDDIR)/anticodegen.dbg.obj: $(SRCDIR)/intrinsics.h
 $(BUILDDIR)/debuginfo.o $(BUILDDIR)/debuginfo.dbg.obj: $(SRCDIR)/debuginfo.h
-$(BUILDDIR)/disasm.o $(BUILDDIR)/disasm.dbg.obj: $(SRCDIR)/debuginfo.h
+$(BUILDDIR)/disasm.o $(BUILDDIR)/disasm.dbg.obj: $(SRCDIR)/debuginfo.h $(SRCDIR)/processor.h
 $(BUILDDIR)/jitlayers.o $(BUILDDIR)/jitlayers.dbg.obj: $(SRCDIR)/jitlayers.h
 $(BUILDDIR)/builtins.o $(BUILDDIR)/builtins.dbg.obj: $(SRCDIR)/table.c
 $(BUILDDIR)/gc.o $(BUILDDIR)/gc.dbg.obj: $(SRCDIR)/gc.h
diff --git a/src/disasm.cpp b/src/disasm.cpp
index 54f7950230..aa9140d578 100644
--- a/src/disasm.cpp
+++ b/src/disasm.cpp
@@ -56,7 +56,6 @@
 #include <llvm/Support/MemoryBuffer.h>
 #include <llvm/Support/SourceMgr.h>
 #include <llvm/Support/TargetRegistry.h>
-#include <llvm/Support/Host.h>
 #include "llvm/Support/TargetSelect.h"
 #include <llvm/Support/raw_ostream.h>
 #include "llvm/Support/FormattedStream.h"
@@ -72,6 +71,7 @@
 
 #include "julia.h"
 #include "julia_internal.h"
+#include "processor.h"
 
 using namespace llvm;
 #include "debuginfo.h"
@@ -636,15 +636,9 @@ static void jl_dump_asm_internal(
     std::string TripleName = sys::getDefaultTargetTriple();
     Triple TheTriple(Triple::normalize(TripleName));
 
-    std::string MCPU = sys::getHostCPUName();
-#ifdef _CPU_ARM_
-    // The Raspberry Pi CPU is misdetected by LLVM (at least of version
-    // 3.6); correct this.
-    if (MCPU == "arm1176jz-s")
-        MCPU = "arm1176jzf-s";
-#endif
-    SubtargetFeatures Features;
-    Features.getDefaultSubtargetFeatures(TheTriple);
+    const auto &target = jl_get_llvm_disasm_target();
+    const auto &cpu = target.first;
+    const auto &features = target.second;
 
     std::string err;
     const Target *TheTarget = TargetRegistry::lookupTarget(TripleName, err);
@@ -670,7 +664,7 @@ static void jl_dump_asm_internal(
 
     // Set up Subtarget and Disassembler
     std::unique_ptr<MCSubtargetInfo>
-        STI(TheTarget->createMCSubtargetInfo(TripleName, MCPU, Features.getString()));
+        STI(TheTarget->createMCSubtargetInfo(TripleName, cpu, features));
     std::unique_ptr<MCDisassembler> DisAsm(TheTarget->createMCDisassembler(*STI, Ctx));
     if (!DisAsm) {
         jl_printf(JL_STDERR, "ERROR: no disassembler for target %s\n",
@@ -696,9 +690,9 @@ static void jl_dump_asm_internal(
         CE = TheTarget->createMCCodeEmitter(*MCII, *MRI, Ctx);
 #if JL_LLVM_VERSION >= 40000
         MCTargetOptions Options;
-        MAB = TheTarget->createMCAsmBackend(*MRI, TripleName, MCPU, Options);
+        MAB = TheTarget->createMCAsmBackend(*MRI, TripleName, cpu, Options);
 #else
-        MAB = TheTarget->createMCAsmBackend(*MRI, TripleName, MCPU);
+        MAB = TheTarget->createMCAsmBackend(*MRI, TripleName, cpu);
 #endif
     }
 
-- 
2.14.2

