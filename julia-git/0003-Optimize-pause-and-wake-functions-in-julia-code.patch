From beff51329afbae8f3677c6feda520103a68c88e3 Mon Sep 17 00:00:00 2001
From: Yichao Yu <yyc1992@gmail.com>
Date: Fri, 21 Apr 2017 11:33:45 -0400
Subject: [PATCH 3/4] Optimize pause and wake functions in julia code

---
 src/ccall.cpp       | 37 ++++++++++++++++++++++++++++++++++++-
 src/codegen.cpp     |  4 +++-
 src/julia_threads.h |  1 +
 3 files changed, 40 insertions(+), 2 deletions(-)

diff --git a/src/ccall.cpp b/src/ccall.cpp
index 60ddb2c9f6..bdd3a48003 100644
--- a/src/ccall.cpp
+++ b/src/ccall.cpp
@@ -1647,12 +1647,47 @@ static jl_cgval_t emit_ccall(jl_value_t **args, size_t nargs, jl_codectx_t *ctx)
         return mark_or_box_ccall_result(emit_bitcast(ary, lrt),
                                         retboxed, rt, unionall, static_rt, ctx);
     }
-    else if (JL_CPU_WAKE_NOOP && is_libjulia_func(jl_cpu_wake)) {
+    else if (is_libjulia_func(jl_cpu_pause)) {
+        // Keep in sync with the julia_threads.h version
         assert(lrt == T_void);
         assert(!isVa && !llvmcall);
         assert(nargt == 0);
+#ifdef __MIC__
+        // TODO
+#elif defined(_CPU_X86_64_) || defined(_CPU_X86_)  /* !__MIC__ */
+#if JL_LLVM_VERSION >= 30700
+        static auto pauseinst = InlineAsm::get(FunctionType::get(T_void, false), "pause",
+                                               "~{memory}", true);
+        builder.CreateCall(pauseinst);
         JL_GC_POP();
         return ghostValue(jl_void_type);
+#endif
+#elif defined(_CPU_AARCH64_) || (defined(_CPU_ARM_) && __ARM_ARCH >= 7)
+        static auto wfeinst = InlineAsm::get(FunctionType::get(T_void, false), "wfe",
+                                               "~{memory}", true);
+        builder.CreateCall(wfeinst);
+        JL_GC_POP();
+        return ghostValue(jl_void_type);
+#else
+        JL_GC_POP();
+        return ghostValue(jl_void_type);
+#endif
+    }
+    else if (is_libjulia_func(jl_cpu_wake)) {
+        // Keep in sync with the julia_threads.h version
+        assert(lrt == T_void);
+        assert(!isVa && !llvmcall);
+        assert(nargt == 0);
+#if JL_CPU_WAKE_NOOP == 1
+        JL_GC_POP();
+        return ghostValue(jl_void_type);
+#elif defined(_CPU_AARCH64_) || (defined(_CPU_ARM_) && __ARM_ARCH >= 7)
+        static auto sevinst = InlineAsm::get(FunctionType::get(T_void, false), "sev",
+                                               "~{memory}", true);
+        builder.CreateCall(sevinst);
+        JL_GC_POP();
+        return ghostValue(jl_void_type);
+#endif
     }
     else if (is_libjulia_func(jl_gc_safepoint)) {
         assert(lrt == T_void);
diff --git a/src/codegen.cpp b/src/codegen.cpp
index 5de00ef196..a9ea6ffed4 100644
--- a/src/codegen.cpp
+++ b/src/codegen.cpp
@@ -96,8 +96,10 @@
 #include <llvm/Support/PrettyStackTrace.h>
 #include <llvm/Support/CommandLine.h>
 
-#if defined(_CPU_ARM_) || defined(_CPU_AARCH64_)
+#if JL_LLVM_VERSION >= 30700
 #  include <llvm/IR/InlineAsm.h>
+#endif
+#if defined(_CPU_ARM_) || defined(_CPU_AARCH64_)
 #  include <sys/utsname.h>
 #endif
 #if defined(USE_POLLY)
diff --git a/src/julia_threads.h b/src/julia_threads.h
index b8c9087076..8fd701f03a 100644
--- a/src/julia_threads.h
+++ b/src/julia_threads.h
@@ -140,6 +140,7 @@ typedef struct _jl_tls_states_t {
 } jl_tls_states_t;
 typedef jl_tls_states_t *jl_ptls_t;
 
+// Update codegen version in `ccall.cpp` after changing either `pause` or `wake`
 #ifdef __MIC__
 #  define jl_cpu_pause() _mm_delay_64(100)
 #  define jl_cpu_wake() ((void)0)
-- 
2.12.2

