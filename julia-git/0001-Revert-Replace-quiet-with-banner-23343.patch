From 33f5042242e5c9a67e8de519528dda8f04ad79a9 Mon Sep 17 00:00:00 2001
From: Yichao Yu <yyc1992@gmail.com>
Date: Fri, 25 Aug 2017 21:08:22 -0400
Subject: [PATCH] Revert "Replace --quiet with --banner (#23343)"

This reverts commit dcb46b36d83962bdd6170db66644573503b499b8
, 92f70e2d3a2a36b115b0f4b2cc2b1d2899443a28
and clarify the help message of `--quiet`.

The option added in the two commits makes zero sense and is simply a duplication of existing one
for all practical purposes. There has be no justification for why the option needs to be added.
---
 NEWS.md                           |  5 -----
 base/client.jl                    |  9 ++++-----
 base/options.jl                   |  1 -
 doc/man/julia.1                   |  4 ++--
 doc/src/manual/getting-started.md |  2 +-
 src/jloptions.c                   | 24 +++++-------------------
 src/julia.h                       |  1 -
 test/cmdlineargs.jl               | 14 ++------------
 test/repl.jl                      |  4 ++--
 9 files changed, 16 insertions(+), 48 deletions(-)

diff --git a/NEWS.md b/NEWS.md
index 6a99d66cf3..71e3dfe38f 100644
--- a/NEWS.md
+++ b/NEWS.md
@@ -374,11 +374,6 @@ Command-line option changes
   * New option `--warn-overwrite={yes|no}` to control the warning for overwriting method
     definitions. The default is `no` ([#23002]).
 
-  * New option `--banner={yes,no}` allows suppressing or forcing the printing of the
-    startup banner, overriding the default behavior (banner in REPL, no banner otherwise).
-    The `--quiet` option implies `--banner=no` even in REPL mode but can be overridden by
-    passing `--quiet` together with `--banner=yes` ([#23342]).
-
 Julia v0.6.0 Release Notes
 ==========================
 
diff --git a/base/client.jl b/base/client.jl
index 3f2f434bf9..c46d5acccc 100644
--- a/base/client.jl
+++ b/base/client.jl
@@ -251,10 +251,9 @@ function process_options(opts::JLOptions)
         length(idxs) > 0 && deleteat!(ARGS, idxs[1])
     end
     repl                  = true
-    quiet                 = (opts.quiet != 0)
-    banner                = (opts.banner == 1 || opts.banner != 0 && opts.isinteractive != 0)
     startup               = (opts.startupfile != 2)
     history_file          = (opts.historyfile != 0)
+    quiet                 = (opts.quiet != 0)
     color_set             = (opts.color != 0)
     global have_color     = (opts.color == 1)
     global is_interactive = (opts.isinteractive != 0)
@@ -318,7 +317,7 @@ function process_options(opts::JLOptions)
         break
     end
     repl |= is_interactive
-    return (quiet,banner,repl,startup,color_set,history_file)
+    return (quiet,repl,startup,color_set,history_file)
 end
 
 function load_juliarc()
@@ -381,7 +380,7 @@ function _start()
     opts = JLOptions()
     @eval Main include(x) = $include(Main, x)
     try
-        (quiet,banner,repl,startup,color_set,history_file) = process_options(opts)
+        (quiet,repl,startup,color_set,history_file) = process_options(opts)
 
         local term
         global active_repl
@@ -394,7 +393,7 @@ function _start()
                 term = Terminals.TTYTerminal(get(ENV, "TERM", @static Sys.iswindows() ? "" : "dumb"), STDIN, STDOUT, STDERR)
                 global is_interactive = true
                 color_set || (global have_color = Terminals.hascolor(term))
-                banner && REPL.banner(term,term)
+                quiet || REPL.banner(term,term)
                 if term.term_type == "dumb"
                     active_repl = REPL.BasicREPL(term)
                     quiet || warn("Terminal not fully functional")
diff --git a/base/options.jl b/base/options.jl
index b4a4583aab..32530a17be 100644
--- a/base/options.jl
+++ b/base/options.jl
@@ -3,7 +3,6 @@
 # NOTE: This type needs to be kept in sync with jl_options in src/julia.h
 struct JLOptions
     quiet::Int8
-    banner::Int8
     julia_home::Ptr{UInt8}
     julia_bin::Ptr{UInt8}
     eval::Ptr{UInt8}
diff --git a/doc/man/julia.1 b/doc/man/julia.1
index 2944eca7f4..b1f40f9dab 100644
--- a/doc/man/julia.1
+++ b/doc/man/julia.1
@@ -108,8 +108,8 @@ Run processes on hosts listed in <file>
 Interactive mode; REPL runs and isinteractive() is true
 
 .TP
---banner={yes|no}
-Enable or disable startup banner
+-q, --quiet
+Quiet startup without banner
 
 .TP
 --color={yes|no}
diff --git a/doc/src/manual/getting-started.md b/doc/src/manual/getting-started.md
index aaafc82a2b..42dee20115 100644
--- a/doc/src/manual/getting-started.md
+++ b/doc/src/manual/getting-started.md
@@ -114,7 +114,7 @@ julia [switches] -- [programfile] [args...]
  --machinefile <file>      Run processes on hosts listed in <file>
 
  -i                        Interactive mode; REPL runs and isinteractive() is true
- --banner={yes|no}         Enable or disable startup banner
+ -q, --quiet               Quiet startup (no banner)
  --color={yes|no}          Enable or disable color text
  --history-file={yes|no}   Load or save history
 
diff --git a/src/jloptions.c b/src/jloptions.c
index 5da1d79159..c36a0bf37a 100644
--- a/src/jloptions.c
+++ b/src/jloptions.c
@@ -34,7 +34,6 @@ JL_DLLEXPORT const char *jl_get_default_sysimg_path(void)
 
 
 jl_options_t jl_options = { 0,    // quiet
-                            -1,   // banner
                             NULL, // julia_home
                             NULL, // julia_bin
                             NULL, // eval
@@ -103,8 +102,7 @@ static const char opts[]  =
 
     // interactive options
     " -i                        Interactive mode; REPL runs and isinteractive() is true\n"
-    " -q, --quiet               Quiet startup: no banner, suppress REPL warnings\n"
-    " --banner={yes|no}         Enable or disable startup banner\n"
+    " -q, --quiet               Quiet startup\n"
     " --color={yes|no}          Enable or disable color text\n"
     " --history-file={yes|no}   Load or save history\n\n"
 
@@ -172,8 +170,7 @@ JL_DLLEXPORT void jl_parse_opts(int *argcp, char ***argvp)
            opt_output_ji,
            opt_use_precompiled,
            opt_use_compilecache,
-           opt_incremental,
-           opt_banner
+           opt_incremental
     };
     static const char* const shortopts = "+vhqH:e:E:L:J:C:ip:O:g:";
     static const struct option longopts[] = {
@@ -183,7 +180,6 @@ JL_DLLEXPORT void jl_parse_opts(int *argcp, char ***argvp)
         { "version",         no_argument,       0, 'v' },
         { "help",            no_argument,       0, 'h' },
         { "quiet",           no_argument,       0, 'q' },
-        { "banner",          required_argument, 0, opt_banner },
         { "home",            required_argument, 0, 'H' },
         { "eval",            required_argument, 0, 'e' },
         { "print",           required_argument, 0, 'E' },
@@ -284,6 +280,9 @@ restart_switch:
         case 'h': // help
             jl_printf(JL_STDOUT, "%s%s", usage, opts);
             jl_exit(0);
+        case 'q': // quiet
+            jl_options.quiet = 1;
+            break;
         case 'g': // debug info
             if (optarg != NULL) {
                 if (!strcmp(optarg,"0"))
@@ -316,19 +315,6 @@ restart_switch:
             jl_options.image_file = strdup(optarg);
             jl_options.image_file_specified = 1;
             break;
-        case 'q': // quiet
-            jl_options.quiet = 1;
-            if (jl_options.banner < 0)
-                jl_options.banner = 0;
-            break;
-        case opt_banner: // banner
-            if (!strcmp(optarg,"yes"))
-                jl_options.banner = 1;
-            else if (!strcmp(optarg,"no"))
-                jl_options.banner = 0;
-            else
-                jl_errorf("julia: invalid argument to --banner={yes|no} (%s)", optarg);
-            break;
         case opt_use_precompiled:
             if (!strcmp(optarg,"yes"))
                 jl_options.use_precompiled = JL_OPTIONS_USE_PRECOMPILED_YES;
diff --git a/src/julia.h b/src/julia.h
index 5fda2e5415..65ad583b02 100644
--- a/src/julia.h
+++ b/src/julia.h
@@ -1672,7 +1672,6 @@ JL_DLLEXPORT void jl_(void *jl_value);
 // NOTE: This struct needs to be kept in sync with JLOptions type in base/options.jl
 typedef struct {
     int8_t quiet;
-    int8_t banner;
     const char *julia_home;
     const char *julia_bin;
     const char *eval;
diff --git a/test/cmdlineargs.jl b/test/cmdlineargs.jl
index b7160b2da8..3865040335 100644
--- a/test/cmdlineargs.jl
+++ b/test/cmdlineargs.jl
@@ -22,18 +22,8 @@ let exename = `$(Base.julia_cmd()) --precompiled=yes --startup-file=no`
         @test startswith(read(`$exename --help`, String), header)
     end
 
-    # --quiet, --banner
-    let t(q,b) = "Base.JLOptions().quiet == $q && Base.JLOptions().banner == $b"
-        @test success(`$exename                 -e $(t(0, -1))`)
-        @test success(`$exename -q              -e $(t(1,  0))`)
-        @test success(`$exename --quiet         -e $(t(1,  0))`)
-        @test success(`$exename --banner=no     -e $(t(0,  0))`)
-        @test success(`$exename --banner=yes    -e $(t(0,  1))`)
-        @test success(`$exename -q --banner=no  -e $(t(1,  0))`)
-        @test success(`$exename -q --banner=yes -e $(t(1,  1))`)
-        @test success(`$exename --banner=no  -q -e $(t(1,  0))`)
-        @test success(`$exename --banner=yes -q -e $(t(1,  1))`)
-    end
+    # --quiet
+    # This flag is indirectly tested in test/repl.jl
 
     # --home
     @test success(`$exename -H $JULIA_HOME`)
diff --git a/test/repl.jl b/test/repl.jl
index 31bd210b7f..1259fa556e 100644
--- a/test/repl.jl
+++ b/test/repl.jl
@@ -626,7 +626,7 @@ let exename = Base.julia_cmd()
         TestHelpers.with_fake_pty() do slave, master
             nENV = copy(ENV)
             nENV["TERM"] = "dumb"
-            p = spawn(setenv(`$exename --startup-file=no -q`,nENV),slave,slave,slave)
+            p = spawn(setenv(`$exename --startup-file=no --quiet`,nENV),slave,slave,slave)
             output = readuntil(master,"julia> ")
             if ccall(:jl_running_on_valgrind,Cint,()) == 0
                 # If --trace-children=yes is passed to valgrind, we will get a
@@ -643,7 +643,7 @@ let exename = Base.julia_cmd()
     end
 
     # Test stream mode
-    outs, ins, p = readandwrite(`$exename --startup-file=no -q`)
+    outs, ins, p = readandwrite(`$exename --startup-file=no --quiet`)
     write(ins,"1\nquit()\n")
     @test read(outs, String) == "1\n"
 end # let exename
-- 
2.14.1

