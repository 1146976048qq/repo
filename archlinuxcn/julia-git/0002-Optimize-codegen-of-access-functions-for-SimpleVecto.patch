From 5801ca643161777398b080264ecced8b0bdfac30 Mon Sep 17 00:00:00 2001
From: Yichao Yu <yyc1992@gmail.com>
Date: Wed, 19 Aug 2020 01:05:14 -0400
Subject: [PATCH 2/8] Optimize codegen of access functions for SimpleVector

---
 base/essentials.jl   | 17 +++------------
 src/ccall.cpp        | 49 ++++++++++++++++++++++++++++++++++++++++++++
 src/codegen.cpp      | 13 +++++++++++-
 src/julia_internal.h |  8 ++++++++
 src/simplevector.c   | 18 ++++++++++++++++
 5 files changed, 90 insertions(+), 15 deletions(-)

diff --git a/base/essentials.jl b/base/essentials.jl
index 5802aff446..8673765f0b 100644
--- a/base/essentials.jl
+++ b/base/essentials.jl
@@ -590,19 +590,11 @@ function getindex(v::SimpleVector, i::Int)
     @boundscheck if !(1 <= i <= length(v))
         throw(BoundsError(v,i))
     end
-    t = @_gc_preserve_begin v
-    x = unsafe_load(convert(Ptr{Ptr{Cvoid}},pointer_from_objref(v)) + i*sizeof(Ptr))
-    x == C_NULL && throw(UndefRefError())
-    o = unsafe_pointer_to_objref(x)
-    @_gc_preserve_end t
-    return o
+    return ccall(:jl_svec_ref, Any, (Any, Int), v, i - 1)
 end
 
 function length(v::SimpleVector)
-    t = @_gc_preserve_begin v
-    l = unsafe_load(convert(Ptr{Int},pointer_from_objref(v)))
-    @_gc_preserve_end t
-    return l
+    return ccall(:jl_svec_len, Int, (Any,), v)
 end
 firstindex(v::SimpleVector) = 1
 lastindex(v::SimpleVector) = length(v)
@@ -655,10 +647,7 @@ function isassigned end
 
 function isassigned(v::SimpleVector, i::Int)
     @boundscheck 1 <= i <= length(v) || return false
-    t = @_gc_preserve_begin v
-    x = unsafe_load(convert(Ptr{Ptr{Cvoid}},pointer_from_objref(v)) + i*sizeof(Ptr))
-    @_gc_preserve_end t
-    return x != C_NULL
+    return ccall(:jl_svec_isassigned, Bool, (Any, Int), v, i - 1)
 end
 
 
diff --git a/src/ccall.cpp b/src/ccall.cpp
index fa7aa70564..4a9c38c167 100644
--- a/src/ccall.cpp
+++ b/src/ccall.cpp
@@ -1481,6 +1481,55 @@ static jl_cgval_t emit_ccall(jl_codectx_t &ctx, jl_value_t **args, size_t nargs)
         ctx.builder.SetInsertPoint(contBB);
         return ghostValue(jl_nothing_type);
     }
+    else if (is_libjulia_func(jl_svec_len)) {
+        assert(!isVa && !llvmcall && nccallargs == 1);
+        const jl_cgval_t &svecv = argv[0];
+        auto ptr = emit_bitcast(ctx, boxed(ctx, svecv), T_psize);
+        Value *len = tbaa_decorate(tbaa_const, ctx.builder.CreateAlignedLoad(
+                                       T_size, ptr, Align(sizeof(size_t))));
+        MDBuilder MDB(jl_LLVMContext);
+        auto rng = MDB.createRange(V_size0, ConstantInt::get(T_size, INTPTR_MAX / sizeof(void*) - 1));
+        cast<LoadInst>(len)->setMetadata(LLVMContext::MD_range, rng);
+        JL_GC_POP();
+        return mark_or_box_ccall_result(ctx, len, retboxed, rt, unionall, static_rt);
+    }
+    else if (is_libjulia_func(jl_svec_isassigned) &&
+             argv[1].typ == (jl_value_t*)jl_long_type) {
+        assert(!isVa && !llvmcall && nccallargs == 2);
+        const jl_cgval_t &svecv = argv[0];
+        const jl_cgval_t &idxv = argv[1];
+        Value *idx = emit_unbox(ctx, T_size, idxv, (jl_value_t*)jl_long_type);
+        idx = ctx.builder.CreateAdd(idx, ConstantInt::get(T_size, 1));
+        auto ptr = emit_bitcast(ctx, boxed(ctx, svecv), T_pprjlvalue);
+        Value *slot_addr = ctx.builder.CreateInBoundsGEP(T_prjlvalue,
+                                                         decay_derived(ctx, ptr), idx);
+        LoadInst *load = ctx.builder.CreateAlignedLoad(T_prjlvalue, slot_addr,
+                                                       Align(sizeof(void*)));
+        load->setAtomic(AtomicOrdering::Unordered);
+        tbaa_decorate(tbaa_const, load);
+        Value *res = ctx.builder.CreateZExt(ctx.builder.CreateICmpNE(load, V_rnull), T_int8);
+        JL_GC_POP();
+        return mark_or_box_ccall_result(ctx, res, retboxed, rt, unionall, static_rt);
+    }
+    else if (is_libjulia_func(jl_svec_ref) &&
+             argv[1].typ == (jl_value_t*)jl_long_type) {
+        assert(lrt == T_prjlvalue);
+        assert(!isVa && !llvmcall && nccallargs == 2);
+        const jl_cgval_t &svecv = argv[0];
+        const jl_cgval_t &idxv = argv[1];
+        Value *idx = emit_unbox(ctx, T_size, idxv, (jl_value_t*)jl_long_type);
+        idx = ctx.builder.CreateAdd(idx, ConstantInt::get(T_size, 1));
+        auto ptr = emit_bitcast(ctx, boxed(ctx, svecv), T_pprjlvalue);
+        Value *slot_addr = ctx.builder.CreateInBoundsGEP(T_prjlvalue,
+                                                         decay_derived(ctx, ptr), idx);
+        LoadInst *load = ctx.builder.CreateAlignedLoad(T_prjlvalue, slot_addr,
+                                                       Align(sizeof(void*)));
+        load->setAtomic(AtomicOrdering::Unordered);
+        tbaa_decorate(tbaa_const, load);
+        null_pointer_check(ctx, load);
+        JL_GC_POP();
+        return mark_or_box_ccall_result(ctx, load, retboxed, rt, unionall, static_rt);
+    }
     else if (is_libjulia_func(jl_array_isassigned) &&
              argv[1].typ == (jl_value_t*)jl_ulong_type) {
         assert(!isVa && !llvmcall && nccallargs == 2);
diff --git a/src/codegen.cpp b/src/codegen.cpp
index ed4689c967..1b45b163f0 100644
--- a/src/codegen.cpp
+++ b/src/codegen.cpp
@@ -3046,9 +3046,20 @@ static bool emit_builtin_call(jl_codectx_t &ctx, jl_cgval_t *ret, jl_value_t *f,
         jl_datatype_t *sty = (jl_datatype_t*)jl_unwrap_unionall(obj.typ);
         assert(jl_string_type->mutabl);
         if (sty == jl_string_type || sty == jl_simplevector_type) {
+            if (obj.constant) {
+                size_t sz;
+                if (sty == jl_string_type) {
+                    sz = jl_string_len(obj.constant);
+                }
+                else {
+                    sz = (1 + jl_svec_len(obj.constant)) * sizeof(void*);
+                }
+                *ret = mark_julia_type(ctx, ConstantInt::get(T_size, sz), false, jl_long_type);
+                return true;
+            }
             // String and SimpleVector's length fields have the same layout
             auto ptr = emit_bitcast(ctx, boxed(ctx, obj), T_psize);
-            Value *len = tbaa_decorate(tbaa_mutab, ctx.builder.CreateAlignedLoad(T_size, ptr, Align(sizeof(size_t))));
+            Value *len = tbaa_decorate(tbaa_const, ctx.builder.CreateAlignedLoad(T_size, ptr, Align(sizeof(size_t))));
             MDBuilder MDB(jl_LLVMContext);
             if (sty == jl_simplevector_type) {
                 auto rng = MDB.createRange(
diff --git a/src/julia_internal.h b/src/julia_internal.h
index ea97c67525..69da1f63d9 100644
--- a/src/julia_internal.h
+++ b/src/julia_internal.h
@@ -1186,6 +1186,14 @@ struct typemap_intersection_env {
 };
 int jl_typemap_intersection_visitor(jl_typemap_t *a, int offs, struct typemap_intersection_env *closure);
 
+// -- simplevector.c -- //
+
+// For codegen only.
+JL_DLLEXPORT size_t (jl_svec_len)(jl_svec_t *t) JL_NOTSAFEPOINT;
+JL_DLLEXPORT int8_t jl_svec_isassigned(jl_svec_t *t JL_PROPAGATES_ROOT, ssize_t i) JL_NOTSAFEPOINT;
+JL_DLLEXPORT jl_value_t *jl_svec_ref(jl_svec_t *t JL_PROPAGATES_ROOT, ssize_t i);
+
+
 unsigned jl_special_vector_alignment(size_t nfields, jl_value_t *field_type);
 
 void register_eh_frames(uint8_t *Addr, size_t Size);
diff --git a/src/simplevector.c b/src/simplevector.c
index 566c2e7100..41b1be14da 100644
--- a/src/simplevector.c
+++ b/src/simplevector.c
@@ -89,3 +89,21 @@ JL_DLLEXPORT jl_svec_t *jl_svec_fill(size_t n, jl_value_t *x)
         jl_svecset(v, i, x);
     return v;
 }
+
+JL_DLLEXPORT size_t (jl_svec_len)(jl_svec_t *t) JL_NOTSAFEPOINT
+{
+    return jl_svec_len(t);
+}
+
+JL_DLLEXPORT int8_t jl_svec_isassigned(jl_svec_t *t JL_PROPAGATES_ROOT, ssize_t i) JL_NOTSAFEPOINT
+{
+    return jl_svecref(t, (size_t)i) != NULL;
+}
+
+JL_DLLEXPORT jl_value_t *jl_svec_ref(jl_svec_t *t JL_PROPAGATES_ROOT, ssize_t i)
+{
+    jl_value_t *v = jl_svecref(t, (size_t)i);
+    if (__unlikely(v == NULL))
+        jl_throw(jl_undefref_exception);
+    return v;
+}
-- 
2.28.0

