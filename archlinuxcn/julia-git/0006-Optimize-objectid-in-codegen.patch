From b9f005796359f0421c3090a1a8ec243c404978a2 Mon Sep 17 00:00:00 2001
From: Yichao Yu <yyc1992@gmail.com>
Date: Fri, 21 Aug 2020 13:15:02 -0400
Subject: [PATCH 6/9] Optimize objectid in codegen

---
 src/ccall.cpp             | 10 +++++++---
 src/codegen.cpp           | 16 ++++++++++++----
 src/llvm-alloc-opt.cpp    | 24 +++++++++++++++++++++++-
 src/llvm-pass-helpers.cpp | 19 +++++++++++++++++++
 src/llvm-pass-helpers.h   |  3 +++
 5 files changed, 64 insertions(+), 8 deletions(-)

diff --git a/src/ccall.cpp b/src/ccall.cpp
index c29e6b20d3..5d4a7a2e7a 100644
--- a/src/ccall.cpp
+++ b/src/ccall.cpp
@@ -1807,6 +1807,7 @@ static jl_cgval_t emit_ccall(jl_codectx_t &ctx, jl_value_t **args, size_t nargs)
     else if (is_libjulia_func(jl_object_id) && nccallargs == 1 &&
             rt == (jl_value_t*)jl_ulong_type) {
         jl_cgval_t val = argv[0];
+        Value *ret;
         if (!val.isboxed) {
             // If the value is not boxed, try to compute the object id without
             // reboxing it.
@@ -1820,10 +1821,13 @@ static jl_cgval_t emit_ccall(jl_codectx_t &ctx, jl_value_t **args, size_t nargs)
                         decay_derived(ctx, data_pointer(ctx, val)),
                         T_pint8_derived)
             };
-            Value *ret = ctx.builder.CreateCall(prepare_call(jl_object_id__func), makeArrayRef(args));
-            JL_GC_POP();
-            return mark_or_box_ccall_result(ctx, ret, retboxed, rt, unionall, static_rt);
+            ret = ctx.builder.CreateCall(prepare_call(jl_object_id__func), makeArrayRef(args));
+        }
+        else {
+            ret = ctx.builder.CreateCall(prepare_call(jl_object_id_func), boxed(ctx, val));
         }
+        JL_GC_POP();
+        return mark_or_box_ccall_result(ctx, ret, retboxed, rt, unionall, static_rt);
     }
 
     jl_cgval_t retval = sig.emit_a_ccall(
diff --git a/src/codegen.cpp b/src/codegen.cpp
index d74dbca310..8c2cec1f7c 100644
--- a/src/codegen.cpp
+++ b/src/codegen.cpp
@@ -376,12 +376,14 @@ static AttributeList get_attrs_zext(LLVMContext &C)
 
 // For libc functions that only read argument memory and not capturing them
 // e.g. memcmp, strlen, etc.
-static AttributeList get_attrs_rdonly(LLVMContext &C, ArrayRef<unsigned> ptrargs)
+static AttributeList get_attrs_rdonly(LLVMContext &C, ArrayRef<unsigned> ptrargs,
+                                      bool argonly=true)
 {
     auto attrs =  AttributeList::get(C,
-                Attributes(C, {Attribute::ReadOnly,
-                        Attribute::NoUnwind, Attribute::ArgMemOnly}),
+                Attributes(C, {Attribute::ReadOnly, Attribute::NoUnwind}),
                 AttributeSet(), None);
+    if (argonly)
+        attrs = attrs.addAttribute(C, AttributeList::FunctionIndex, Attribute::ArgMemOnly);
     for (auto arg: ptrargs)
         attrs = attrs.addParamAttribute(C, arg, Attribute::NoCapture);
     return attrs;
@@ -736,7 +738,13 @@ static const auto jl_object_id__func = new JuliaFunction{
     "jl_object_id_",
     [](LLVMContext &C) { return FunctionType::get(T_size,
             {T_prjlvalue, PointerType::get(T_int8, AddressSpace::Derived)}, false); },
-    nullptr,
+    [](LLVMContext &C) { return get_attrs_rdonly(C, {0, 1}, false); },
+};
+static const auto jl_object_id_func = new JuliaFunction{
+    "jl_object_id",
+    [](LLVMContext &C) { return FunctionType::get(T_size,
+            {T_prjlvalue}, false); },
+    [](LLVMContext &C) { return get_attrs_rdonly(C, {0}, false); },
 };
 static const auto setjmp_func = new JuliaFunction{
     jl_setjmp_name,
diff --git a/src/llvm-alloc-opt.cpp b/src/llvm-alloc-opt.cpp
index cd75392dee..f4e1373a72 100644
--- a/src/llvm-alloc-opt.cpp
+++ b/src/llvm-alloc-opt.cpp
@@ -118,6 +118,8 @@ struct AllocOpt : public FunctionPass, public JuliaPassContext {
 
     Function *lifetime_start;
     Function *lifetime_end;
+    Function *object_id_func;
+    Function *object_id__func;
 
     Type *T_int64;
 
@@ -614,7 +616,7 @@ void Optimizer::checkInst(Instruction *I)
                     return true;
                 }
             }
-            if (pass.pointer_from_objref_func == callee) {
+            if (pass.pointer_from_objref_func == callee || pass.object_id_func == callee) {
                 use_info.addrescaped = true;
                 return true;
             }
@@ -1008,6 +1010,17 @@ void Optimizer::moveToStack(CallInst *orig_inst, size_t sz, bool has_ref)
                 call->eraseFromParent();
                 return;
             }
+            if (pass.object_id_func == callee) {
+                IRBuilder<> builder(call);
+                builder.SetCurrentDebugLocation(call->getDebugLoc());
+                auto PT = PointerType::get(pass.T_int8, AddressSpace::Derived);
+                auto ptr = builder.CreatePointerCast(new_i, PT);
+                auto new_call = builder.CreateCall(pass.object_id__func, {tag, ptr});
+                new_call->takeName(call);
+                call->replaceAllUsesWith(new_call);
+                call->eraseFromParent();
+                return;
+            }
             if (pass.typeof_func == callee) {
                 call->replaceAllUsesWith(tag);
                 call->eraseFromParent();
@@ -1490,6 +1503,15 @@ bool AllocOpt::doInitialization(Module &M)
     if (!alloc_obj_func)
         return false;
 
+    object_id_func = M.getFunction("jl_object_id");
+    if (object_id_func) {
+        // We only need `jl_object_id_` if `jl_object_id` exists
+        object_id__func = getOrDeclare(jl_well_known::ObjectID_);
+    }
+    else {
+        object_id__func = nullptr;
+    }
+
     DL = &M.getDataLayout();
 
     T_int64 = Type::getInt64Ty(getLLVMContext());
diff --git a/src/llvm-pass-helpers.cpp b/src/llvm-pass-helpers.cpp
index d594408a20..d07488ad36 100644
--- a/src/llvm-pass-helpers.cpp
+++ b/src/llvm-pass-helpers.cpp
@@ -211,6 +211,7 @@ namespace jl_well_known {
     static const char *GC_BIG_ALLOC_NAME = "jl_gc_big_alloc";
     static const char *GC_POOL_ALLOC_NAME = "jl_gc_pool_alloc";
     static const char *GC_QUEUE_ROOT_NAME = "jl_gc_queue_root";
+    static const char *OBJECT_ID__NAME = "jl_object_id_";
 
     using jl_intrinsics::addGCAllocAttributes;
 
@@ -255,4 +256,22 @@ namespace jl_well_known {
             func->addFnAttr(Attribute::InaccessibleMemOrArgMemOnly);
             return func;
         });
+
+    const WellKnownFunctionDescription ObjectID_(
+        OBJECT_ID__NAME,
+        [](const JuliaPassContext &context) {
+            auto func = Function::Create(
+                FunctionType::get(
+                    context.T_size,
+                    {context.T_prjlvalue,
+                     PointerType::get(context.T_int8, AddressSpace::Derived)},
+                    false),
+                Function::ExternalLinkage,
+                OBJECT_ID__NAME);
+            func->addFnAttr(Attribute::ReadOnly);
+            func->addFnAttr(Attribute::NoUnwind);
+            func->addParamAttr(0, Attribute::NoCapture);
+            func->addParamAttr(1, Attribute::NoCapture);
+            return func;
+        });
 }
diff --git a/src/llvm-pass-helpers.h b/src/llvm-pass-helpers.h
index 71cab27e76..7fb8424611 100644
--- a/src/llvm-pass-helpers.h
+++ b/src/llvm-pass-helpers.h
@@ -152,6 +152,9 @@ namespace jl_well_known {
 
     // `jl_gc_queue_root`: queues a GC root.
     extern const WellKnownFunctionDescription GCQueueRoot;
+
+    // `jl_object_id_`: compute object id without boxing.
+    extern const WellKnownFunctionDescription ObjectID_;
 }
 
 #endif
-- 
2.28.0

