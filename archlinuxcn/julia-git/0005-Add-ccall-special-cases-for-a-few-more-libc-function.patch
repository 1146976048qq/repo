From d1257a8fb83dee1164dc9d834dd7d2af533557a3 Mon Sep 17 00:00:00 2001
From: Yichao Yu <yyc1992@gmail.com>
Date: Fri, 21 Aug 2020 10:29:29 -0400
Subject: [PATCH 5/9] Add ccall special cases for a few more libc functions
 that LLVM is aware of

Includes ones that are used in base and ones that LLVM can most likely
take advantage of (inlining or useful attribute like readonly).

AFAICT, LLVM does not provide a builtin way to do this automatically.
Clang also does this by keeping an internal list of known functions
in additional to the LLVM one.

Also cleanup the non-safepoint function list in `llvm-alloc-opt`
and add comment to emphasize the difference with the similar concept in other passes.
---
 src/ccall.cpp          | 135 ++++++++++++++++++++++++++++++++++++++++-
 src/codegen.cpp        |  17 ++++--
 src/llvm-alloc-opt.cpp |  23 ++++++-
 3 files changed, 166 insertions(+), 9 deletions(-)

diff --git a/src/ccall.cpp b/src/ccall.cpp
index b676126c90..c29e6b20d3 100644
--- a/src/ccall.cpp
+++ b/src/ccall.cpp
@@ -1213,6 +1213,13 @@ static Value *emit_new_array(jl_codectx_t &ctx, jl_cgval_t *argv)
     return ctx.builder.CreateCall(prepare_call(jl_new_array_func), {typv, dimsv()});
 }
 
+static SmallVector<OperandBundleDef,1> roots_operand(ArrayRef<Value*> gc_uses)
+{
+    if (gc_uses.empty())
+        return {};
+    return {OperandBundleDef("jl_roots", gc_uses)};
+}
+
 // Expr(:foreigncall, pointer, rettype, (argtypes...), nreq, cconv, args..., roots...)
 static jl_cgval_t emit_ccall(jl_codectx_t &ctx, jl_value_t **args, size_t nargs)
 {
@@ -1250,7 +1257,7 @@ static jl_cgval_t emit_ccall(jl_codectx_t &ctx, jl_value_t **args, size_t nargs)
     };
 
     auto _is_libjulia_func = [&] (uintptr_t ptr, const char *name) {
-        if ((uintptr_t)fptr == ptr)
+        if (ptr && (uintptr_t)fptr == ptr)
             return true;
         return (!f_lib || f_lib == JL_DL_LIBNAME) && f_name && !strcmp(f_name, name);
     };
@@ -1674,6 +1681,129 @@ static jl_cgval_t emit_ccall(jl_codectx_t &ctx, jl_value_t **args, size_t nargs)
         return rt == (jl_value_t*)jl_nothing_type ? ghostValue(jl_nothing_type) :
             mark_or_box_ccall_result(ctx, destp, retboxed, rt, unionall, static_rt);
     }
+    else if (is_libjulia_func(memmove) && (rt == (jl_value_t*)jl_nothing_type || jl_is_cpointer_type(rt))) {
+        const jl_cgval_t &dst = argv[0];
+        const jl_cgval_t &src = argv[1];
+        const jl_cgval_t &n = argv[2];
+        Value *destp = emit_unbox(ctx, T_size, dst, (jl_value_t*)jl_voidpointer_type);
+
+        ctx.builder.CreateMemMove(
+                emit_inttoptr(ctx, destp, T_pint8),
+#if JL_LLVM_VERSION >= 100000
+                MaybeAlign(1),
+#else
+                1,
+#endif
+                emit_inttoptr(ctx,
+                    emit_unbox(ctx, T_size, src, (jl_value_t*)jl_voidpointer_type),
+                    T_pint8),
+#if JL_LLVM_VERSION >= 100000
+                MaybeAlign(0),
+#else
+                0,
+#endif
+                emit_unbox(ctx, T_size, n, (jl_value_t*)jl_ulong_type),
+                false);
+        JL_GC_POP();
+        return rt == (jl_value_t*)jl_nothing_type ? ghostValue(jl_nothing_type) :
+            mark_or_box_ccall_result(ctx, destp, retboxed, rt, unionall, static_rt);
+    }
+    else if (is_libjulia_func(memset) && (rt == (jl_value_t*)jl_nothing_type || jl_is_cpointer_type(rt))) {
+        const jl_cgval_t &dst = argv[0];
+        const jl_cgval_t &val = argv[1];
+        const jl_cgval_t &n = argv[2];
+        Value *destp = emit_unbox(ctx, T_size, dst, (jl_value_t*)jl_voidpointer_type);
+
+        ctx.builder.CreateMemSet(
+            emit_inttoptr(ctx, destp, T_pint8),
+            ctx.builder.CreateTrunc(emit_unbox(ctx, T_int32, val, (jl_value_t*)jl_int32_type),
+                                    T_int8),
+            emit_unbox(ctx, T_size, n, (jl_value_t*)jl_ulong_type),
+#if JL_LLVM_VERSION >= 100000
+            MaybeAlign(1),
+#else
+            1,
+#endif
+            false);
+        JL_GC_POP();
+        return rt == (jl_value_t*)jl_nothing_type ? ghostValue(jl_nothing_type) :
+            mark_or_box_ccall_result(ctx, destp, retboxed, rt, unionall, static_rt);
+    }
+    // For optimization of ccalls with pointer in default address space,
+    // we need to keep the `jl_roots` operand bundle to make sure
+    // the use is visible to the optimization passes (see `isSafepoint` in the AllocOpt pass).
+    // This operand bundle does not seem to prevent LLVM from preforming optimization on known
+    // libcalls.
+    else if ((is_libjulia_func(memcmp) || is_libjulia_func(strncmp)) &&
+             (rt == (jl_value_t*)jl_int32_type || rt == (jl_value_t*)jl_uint32_type)) {
+        Value *p1 = emit_unbox(ctx, T_size, argv[0], (jl_value_t*)jl_voidpointer_type);
+        Value *p2 = emit_unbox(ctx, T_size, argv[1], (jl_value_t*)jl_voidpointer_type);
+        Value *n = emit_unbox(ctx, T_size, argv[2], (jl_value_t*)jl_ulong_type);
+        p1 = emit_inttoptr(ctx, p1, T_pint8);
+        p2 = emit_inttoptr(ctx, p2, T_pint8);
+        Value *res;
+        if (is_libjulia_func(memcmp)) {
+            res = ctx.builder.CreateCall(prepare_call(memcmp_func), { p1, p2, n },
+                                         roots_operand(gc_uses));
+        }
+        else {
+            auto FT = FunctionType::get(T_int32, {T_pint8, T_pint8, T_size}, false);
+            auto attrs = get_attrs_rdonly(jl_LLVMContext, {0, 1});
+            auto callee = jl_Module->getOrInsertFunction("strncmp", FT, attrs);
+            res = ctx.builder.CreateCall(callee, { p1, p2, n }, roots_operand(gc_uses));
+        }
+        JL_GC_POP();
+        return mark_or_box_ccall_result(ctx, res, retboxed, rt, unionall, static_rt);
+    }
+    else if (is_libjulia_func(strcmp) && (rt == (jl_value_t*)jl_int32_type ||
+                                          rt == (jl_value_t*)jl_uint32_type)) {
+        Value *p1 = emit_unbox(ctx, T_size, argv[0], (jl_value_t*)jl_voidpointer_type);
+        Value *p2 = emit_unbox(ctx, T_size, argv[1], (jl_value_t*)jl_voidpointer_type);
+        p1 = emit_inttoptr(ctx, p1, T_pint8);
+        p2 = emit_inttoptr(ctx, p2, T_pint8);
+        auto FT = FunctionType::get(T_int32, {T_pint8, T_pint8}, false);
+        auto attrs = get_attrs_rdonly(jl_LLVMContext, {0, 1});
+        auto callee = jl_Module->getOrInsertFunction("strcmp", FT, attrs);
+        Value *res = ctx.builder.CreateCall(callee, { p1, p2 }, roots_operand(gc_uses));
+        JL_GC_POP();
+        return mark_or_box_ccall_result(ctx, res, retboxed, rt, unionall, static_rt);
+    }
+    else if (is_libjulia_func(strlen) && (rt == (jl_value_t*)jl_long_type ||
+                                          rt == (jl_value_t*)jl_ulong_type)) {
+        Value *p = emit_unbox(ctx, T_size, argv[0], (jl_value_t*)jl_voidpointer_type);
+        auto *FT = FunctionType::get(T_size, {T_pint8}, false);
+        auto attrs = get_attrs_rdonly(jl_LLVMContext, {0});
+        auto callee = jl_Module->getOrInsertFunction("strlen", FT, attrs);
+        auto res = ctx.builder.CreateCall(callee, emit_inttoptr(ctx, p, T_pint8),
+                                          roots_operand(gc_uses));
+        JL_GC_POP();
+        return mark_or_box_ccall_result(ctx, res, retboxed, rt, unionall, static_rt);
+    }
+    else if ((_is_libjulia_func(0, "strchr") || _is_libjulia_func(0, "strrchr")) &&
+             jl_is_cpointer_type(rt)) {
+        Value *p = emit_unbox(ctx, T_size, argv[0], (jl_value_t*)jl_voidpointer_type);
+        Value *v = emit_unbox(ctx, T_int32, argv[1], (jl_value_t*)jl_int32_type);
+        auto *FT = FunctionType::get(T_pint8, {T_pint8, T_int32}, false);
+        auto attrs = get_attrs_rdonly(jl_LLVMContext, {0});
+        auto callee = jl_Module->getOrInsertFunction(f_name, FT, attrs);
+        auto res = ctx.builder.CreateCall(callee, {emit_inttoptr(ctx, p, T_pint8), v},
+                                          roots_operand(gc_uses));
+        JL_GC_POP();
+        return mark_or_box_ccall_result(ctx, res, retboxed, rt, unionall, static_rt);
+    }
+    else if ((_is_libjulia_func(0, "memchr") || _is_libjulia_func(0, "memrchr")) &&
+             jl_is_cpointer_type(rt)) {
+        Value *p = emit_unbox(ctx, T_size, argv[0], (jl_value_t*)jl_voidpointer_type);
+        Value *v = emit_unbox(ctx, T_int32, argv[1], (jl_value_t*)jl_int32_type);
+        Value *n = emit_unbox(ctx, T_size, argv[2], (jl_value_t*)jl_ulong_type);
+        auto *FT = FunctionType::get(T_pint8, {T_pint8, T_int32, T_size}, false);
+        auto attrs = get_attrs_rdonly(jl_LLVMContext, {0});
+        auto callee = jl_Module->getOrInsertFunction(f_name, FT, attrs);
+        auto res = ctx.builder.CreateCall(callee, {emit_inttoptr(ctx, p, T_pint8), v, n},
+                                          roots_operand(gc_uses));
+        JL_GC_POP();
+        return mark_or_box_ccall_result(ctx, res, retboxed, rt, unionall, static_rt);
+    }
     else if (is_libjulia_func(jl_object_id) && nccallargs == 1 &&
             rt == (jl_value_t*)jl_ulong_type) {
         jl_cgval_t val = argv[0];
@@ -1865,11 +1995,10 @@ jl_cgval_t function_sig_t::emit_a_ccall(
         }
     }
 
-    OperandBundleDef OpBundle("jl_roots", gc_uses);
     // the actual call
     CallInst *ret = ctx.builder.CreateCall(functype, llvmf,
             ArrayRef<Value*>(&argvals[0], nccallargs + sret),
-            ArrayRef<OperandBundleDef>(&OpBundle, gc_uses.empty() ? 0 : 1));
+            roots_operand(gc_uses));
     ((CallInst*)ret)->setAttributes(attributes);
 
     if (cc != CallingConv::C)
diff --git a/src/codegen.cpp b/src/codegen.cpp
index 0392ac5dbd..d74dbca310 100644
--- a/src/codegen.cpp
+++ b/src/codegen.cpp
@@ -374,6 +374,18 @@ static AttributeList get_attrs_zext(LLVMContext &C)
                 {Attributes(C, {Attribute::ZExt})});
 }
 
+// For libc functions that only read argument memory and not capturing them
+// e.g. memcmp, strlen, etc.
+static AttributeList get_attrs_rdonly(LLVMContext &C, ArrayRef<unsigned> ptrargs)
+{
+    auto attrs =  AttributeList::get(C,
+                Attributes(C, {Attribute::ReadOnly,
+                        Attribute::NoUnwind, Attribute::ArgMemOnly}),
+                AttributeSet(), None);
+    for (auto arg: ptrargs)
+        attrs = attrs.addParamAttribute(C, arg, Attribute::NoCapture);
+    return attrs;
+}
 
 // global vars
 static const auto jlRTLD_DEFAULT_var = new JuliaVariable{
@@ -743,10 +755,7 @@ static const auto memcmp_func = new JuliaFunction{
     "memcmp",
     [](LLVMContext &C) { return FunctionType::get(T_int32,
             {T_pint8, T_pint8, T_size}, false); },
-    [](LLVMContext &C) { return AttributeList::get(C,
-            Attributes(C, {Attribute::ReadOnly, Attribute::NoUnwind, Attribute::ArgMemOnly}),
-            AttributeSet(),
-            None); },
+    [](LLVMContext &C) { return get_attrs_rdonly(C, {0, 1}); },
     // TODO: inferLibFuncAttributes(*memcmp_func, TLI);
 };
 static const auto jldlsym_func = new JuliaFunction{
diff --git a/src/llvm-alloc-opt.cpp b/src/llvm-alloc-opt.cpp
index 5ce8ef3c00..cd75392dee 100644
--- a/src/llvm-alloc-opt.cpp
+++ b/src/llvm-alloc-opt.cpp
@@ -377,14 +377,33 @@ bool Optimizer::finalize()
 
 bool Optimizer::isSafepoint(Instruction *inst)
 {
+    // The definition of safepoint here is slightly different from other places.
+    // We use this function to compute where to insert lifetime intrinsics so
+    // we need to make sure all the calls that can be emitted by llvm and codegen
+    // without explicitly preserving the (non-special) pointers they use must not be
+    // treated as safepoint.
+
+    // Unlike the root placement pass, where we want to identify the minimal set of
+    // calls that are not safepoint in order to minimize interaction with the GC,
+    // here we actually want to find the maximum set of functions
+    // that can be treated as safepoints in order to minimize the lifetime of the stack slot.
+
+    // The non-safepoint functions here include any calls that can be inserted
+    // between `pointer_from_objref` and its unprotected/untracked use.
+    // We do not do this in codegen currently but we conservatively treat
+    // `julia.pointer_from_objref` as non-safepoint here so that it is legal to
+    // create multiple calls of `julia.pointer_from_objref` and use the resulting pointers
+    // without preserving the object.
+    // We also need to include all the LLVM intrinsics
+    // since they can be added by LLVM automatically.
+    // See also comment about ccall optimization in `ccall.cpp`.
     auto call = dyn_cast<CallInst>(inst);
     if (!call)
         return false;
     if (isa<IntrinsicInst>(call))
         return false;
     if (auto callee = call->getCalledFunction()) {
-        // Known functions emitted in codegen that are not safepoints
-        if (callee == pass.pointer_from_objref_func || callee->getName() == "memcmp") {
+        if (callee == pass.pointer_from_objref_func) {
             return false;
         }
     }
-- 
2.28.0

