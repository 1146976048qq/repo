From 672c0d5e85865a0d2304716085b9825648c5fe36 Mon Sep 17 00:00:00 2001
From: Yichao Yu <yyc1992@gmail.com>
Date: Thu, 13 Aug 2020 02:24:27 -0400
Subject: [PATCH 7/7] Mark more functions as not safepoint in codegen.

---
 src/ccall.cpp                 |  22 ++-
 src/codegen.cpp               |   8 +-
 src/codegen_shared.h          |   1 +
 src/llvm-late-gc-lowering.cpp | 272 +++++++++++++++++++++++++++++++++-
 4 files changed, 293 insertions(+), 10 deletions(-)

diff --git a/src/ccall.cpp b/src/ccall.cpp
index 0cb2c4e1a2..000bf9a8f8 100644
--- a/src/ccall.cpp
+++ b/src/ccall.cpp
@@ -126,6 +126,7 @@ static Value *runtime_sym_lookup(
         llvmf = irbuilder.CreateCall(prepare_call_in(jl_builderModule(irbuilder), jldlsym_func),
                     { libname, nameval, libptrgv });
     }
+    llvmf->setMetadata("julia.notsafepoint", MDNode::get(jl_LLVMContext, None));
     StoreInst *store = irbuilder.CreateAlignedStore(llvmf, llvmgv, Align(sizeof(void*)));
     store->setAtomic(AtomicOrdering::Release);
     irbuilder.CreateBr(ccall_bb);
@@ -1475,13 +1476,15 @@ static jl_cgval_t emit_ccall(jl_codectx_t &ctx, jl_value_t **args, size_t nargs)
 #elif defined(_CPU_X86_64_) || defined(_CPU_X86_)  /* !__MIC__ */
         static auto pauseinst = InlineAsm::get(FunctionType::get(T_void, false), "pause",
                                                "~{memory}", true);
-        ctx.builder.CreateCall(pauseinst);
+        ctx.builder.CreateCall(pauseinst)
+            ->setMetadata("julia.notsafepoint", MDNode::get(jl_LLVMContext, None));
         JL_GC_POP();
         return ghostValue(jl_nothing_type);
 #elif defined(_CPU_AARCH64_) || (defined(_CPU_ARM_) && __ARM_ARCH >= 7)
         static auto wfeinst = InlineAsm::get(FunctionType::get(T_void, false), "wfe",
                                              "~{memory}", true);
-        ctx.builder.CreateCall(wfeinst);
+        ctx.builder.CreateCall(wfeinst)
+            ->setMetadata("julia.notsafepoint", MDNode::get(jl_LLVMContext, None));
         JL_GC_POP();
         return ghostValue(jl_nothing_type);
 #else
@@ -1499,7 +1502,8 @@ static jl_cgval_t emit_ccall(jl_codectx_t &ctx, jl_value_t **args, size_t nargs)
 #elif defined(_CPU_AARCH64_) || (defined(_CPU_ARM_) && __ARM_ARCH >= 7)
         static auto sevinst = InlineAsm::get(FunctionType::get(T_void, false), "sev",
                                              "~{memory}", true);
-        ctx.builder.CreateCall(sevinst);
+        ctx.builder.CreateCall(sevinst)
+            ->setMetadata("julia.notsafepoint", MDNode::get(jl_LLVMContext, None));
         JL_GC_POP();
         return ghostValue(jl_nothing_type);
 #endif
@@ -2108,11 +2112,21 @@ jl_cgval_t function_sig_t::emit_a_ccall(
         }
     }
 
+    bool notsafepoint = false;
+    if ((symarg.f_lib == nullptr
+#ifdef _OS_WINDOWS_
+        || symarg.f_lib == JL_EXE_LIBNAME
+        || symarg.f_lib == JL_DL_LIBNAME
+#endif
+            ) && isNotSafepointFunc(symarg.f_name))
+        notsafepoint = true;
     // the actual call
     CallInst *ret = ctx.builder.CreateCall(functype, llvmf,
             ArrayRef<Value*>(&argvals[0], nccallargs + sret),
             roots_operand(gc_uses));
-    ((CallInst*)ret)->setAttributes(attributes);
+    ret->setAttributes(attributes);
+    if (notsafepoint)
+        ret->setMetadata("julia.notsafepoint", MDNode::get(jl_LLVMContext, None));
 
     if (cc != CallingConv::C)
         ((CallInst*)ret)->setCallingConv(cc);
diff --git a/src/codegen.cpp b/src/codegen.cpp
index d3e7aa0705..6c0f106b56 100644
--- a/src/codegen.cpp
+++ b/src/codegen.cpp
@@ -639,7 +639,7 @@ static const auto jlenter_func = new JuliaFunction{
 static const auto jl_current_exception_func = new JuliaFunction{
     "jl_current_exception",
     [](LLVMContext &C) { return FunctionType::get(T_prjlvalue, false); },
-    nullptr,
+    [](LLVMContext &C) { return get_attrs_rdonly(C, {}, false); },
 };
 static const auto jlleave_func = new JuliaFunction{
     "jl_pop_handler",
@@ -656,14 +656,14 @@ static const auto jl_restore_excstack_func = new JuliaFunction{
 static const auto jl_excstack_state_func = new JuliaFunction{
     "jl_excstack_state",
     [](LLVMContext &C) { return FunctionType::get(T_size, false); },
-    nullptr,
+    [](LLVMContext &C) { return get_attrs_rdonly(C, {}, false); },
 };
 static const auto jlegal_func = new JuliaFunction{
     "jl_egal",
     [](LLVMContext &C) {
         Type *T = PointerType::get(T_jlvalue, AddressSpace::CalleeRooted);
         return FunctionType::get(T_int32, {T, T}, false); },
-    nullptr,
+    [](LLVMContext &C) { return get_attrs_rdonly(C, {0, 1}, false); },
 };
 static const auto jl_alloc_obj_func = new JuliaFunction{
     "julia.gc_alloc_obj",
@@ -841,7 +841,7 @@ static const auto jlarray_data_owner_func = new JuliaFunction{
     [](LLVMContext &C) { return FunctionType::get(T_prjlvalue,
             {T_prjlvalue}, false); },
     [](LLVMContext &C) { return AttributeList::get(C,
-            Attributes(C, {Attribute::ReadOnly, Attribute::NoUnwind}),
+            Attributes(C, {Attribute::ReadOnly, Attribute::NoUnwind, Attribute::ArgMemOnly}),
             Attributes(C, {Attribute::NonNull}),
             None); },
 };
diff --git a/src/codegen_shared.h b/src/codegen_shared.h
index ee11870874..8fc9b94924 100644
--- a/src/codegen_shared.h
+++ b/src/codegen_shared.h
@@ -36,6 +36,7 @@ std::vector<llvm::Value*> ExtractTrackedValues(llvm::Value *Src, llvm::Type *STy
 unsigned TrackWithShadow(llvm::Value *Src, llvm::Type *T, bool isptr, llvm::Value *Dst, llvm::IRBuilder<> irbuilder);
 std::vector<llvm::Value*> ExtractTrackedValues(llvm::Value *Src, llvm::Type *STy, bool isptr, llvm::IRBuilder<> irbuilder, llvm::ArrayRef<unsigned> perm_offsets={});
 #endif
+bool isNotSafepointFunc(llvm::StringRef name);
 
 static inline void llvm_dump(llvm::Value *v)
 {
diff --git a/src/llvm-late-gc-lowering.cpp b/src/llvm-late-gc-lowering.cpp
index ecf93e50ee..d6d816bec4 100644
--- a/src/llvm-late-gc-lowering.cpp
+++ b/src/llvm-late-gc-lowering.cpp
@@ -39,6 +39,8 @@
 #include "julia_assert.h"
 #include "llvm-pass-helpers.h"
 
+#include <set>
+
 #define DEBUG_TYPE "late_lower_gcroot"
 
 using namespace llvm;
@@ -227,6 +229,271 @@ using namespace llvm;
       simply sink the alloca into the GCFrame.
 */
 
+bool isNotSafepointFunc(StringRef name)
+{
+    // Some of these do have safepoint, but only in error path
+    // and never needs the input argument to be rooted in those cases.
+    static std::set<std::string> funcs = {
+        "bcmp",
+        "ios_bufmode",
+        "ios_close",
+        "ios_copyuntil",
+        "ios_file",
+        "ios_mem",
+        "ios_pos",
+        "ios_read",
+        "ios_readall",
+        "ios_readline",
+        "ios_seek",
+        "ios_seek_end",
+        "ios_setbuf",
+        "ios_trunc",
+        "ios_write",
+        "jl_",
+        "jl_argument_datatype",
+        "jl_argument_method_table",
+        "jl_array_data_owner",
+        "jl_array_ptr_copy",
+        "jl_array_ptr_data",
+        "jl_array_typetagdata",
+        "jl_assign_bits",
+        "jlbacktrace",
+        "jl_binding_resolved_p",
+        "jl_bounds_error_int",
+        "jl_bounds_error_ints",
+        "jl_bounds_error_unboxed_int",
+        "jl_box_bool",
+        "jl_box_int8",
+        "jl_box_uint8",
+        "jl_breakpoint",
+        "jl_capture_interp_frame",
+        "jl_checked_assignment",
+        "jl_cpu_threads",
+        "jl_current_exception",
+        "jl_defines_or_exports_p",
+        "jl_dlclose",
+        "jl_dlopen",
+        "jl_dlsym",
+        "jl_egal",
+        "jl_eqtable_get",
+        "jl_errno",
+        "jl_error",
+        "jl_exception_clear",
+        "jl_excstack_state",
+        "jl_field_isdefined",
+        "jl_f_ifelse",
+        "jl_first_argument_datatype",
+        "jl_flush_cstdio",
+        "jl_f_setfield",
+        "jl_fs_write",
+        "jl_f_throw",
+        "jl_f_typeof",
+        "jl_gc_diff_total_bytes",
+        "jl_gc_get_total_bytes",
+        "jl_gc_sync_total_bytes",
+        "jl_gc_queue_multiroot",
+        "jl_gc_queue_root",
+        "jl_gc_sync_total_bytes",
+        "jl_gdblookup",
+        "jl_generating_output",
+        "jl_gensym",
+        "jl_getallocationgranularity",
+        "jl_get_ARCH",
+        "jl_get_field_offset",
+        "jl_get_module_binding",
+        "jl_get_next_task",
+        "jl_get_nth_field_noalloc",
+        "jl_getpagesize",
+        "jl_getallocationgranularity",
+        "jl_getpid",
+        "jl_get_task_tid",
+        "jl_get_tls_world_age",
+        "jl_get_UNAME",
+        "jl_get_world_counter",
+        "jl_has_free_typevars",
+        "jl_has_meta",
+        "jl_has_typevar",
+        "jl_id_char",
+        "jl_id_start_char",
+        "jl_intrinsic_name",
+        "jl_ir_flag_inferred",
+        "jl_ir_flag_inlineable",
+        "jl_ir_flag_pure",
+        "jl_ir_nslots",
+        "jl_ir_slotflag",
+        "jl_is_debugbuild",
+        "jl_is_identifier",
+        "jl_islayout_inline",
+        "jl_is_memdebug",
+        "jl_is_task_started",
+        "jl_load_and_lookup",
+        "jl_load_dynamic_library",
+        "jl_malloc_stack",
+        "jl_method_table_for",
+        "jl_module_exports_p",
+        "jl_nth_slot_type",
+        "jl_object_id",
+        "jl_object_id_",
+        "jl_ptrarrayref",
+        "jl_restore_excstack",
+        "jl_rettype_inferred",
+        "jl_safe_printf",
+        "jl_set_errno",
+        "jl_set_next_task",
+        "jl_set_nth_field",
+        "jl_set_task_tid",
+        "jl_stat",
+        "jl_static_show",
+        "jl_static_show_func_sig",
+        "jl_stderr_obj",
+        "jl_stdout_obj",
+        "jl_stored_inline",
+        "jl_symbol",
+        "jl_symbol_lookup",
+        "jl_symbol_n",
+        "jl_tagged_gensym",
+        "jl_throw",
+        "jl_type_equality_is_identity",
+        "jl_type_error",
+        "jl_typename_str",
+        "jl_typeof_str",
+        "jl_unbox_bool",
+        "jl_unbox_float32",
+        "jl_unbox_float64",
+        "jl_unbox_int16",
+        "jl_unbox_int32",
+        "jl_unbox_int64",
+        "jl_unbox_int8",
+        "jl_unbox_uint16",
+        "jl_unbox_uint32",
+        "jl_unbox_uint64",
+        "jl_unbox_uint8",
+        "jl_unbox_uint8pointer",
+        "jl_unbox_voidpointer",
+        "jl_undefined_var_error",
+        "julia.loopinfo_marker",
+        "calloc",
+        "close",
+        "_close",
+        "CloseHandle",
+        "DuplicateHandle",
+        "_dyld_get_image_name",
+        "_dyld_image_count",
+        "fchdir",
+        "fclose",
+        "fegetround",
+        "fesetround",
+        "FormatMessageW",
+        "free",
+        "FreeEnvironmentStringsW",
+        "fseek",
+        "ftell",
+        "futimes",
+        "getattrlist",
+        "_getch",
+        "GetCurrentProcess",
+        "getenv",
+        "GetEnvironmentStringsW",
+        "GetEnvironmentVariableW",
+        "gethostname",
+        "GetLastError",
+        "_get_osfhandle",
+        "getpass",
+        "GetTempFileNameW",
+        "GetVersion",
+        "LCMapStringW",
+        "LocalFree",
+        "localtime_r",
+        "malloc",
+        "memccpy",
+        "memchr",
+        "memcmp",
+        "memcpy",
+        "memmove",
+        "memrchr",
+        "memset",
+        "mkstemp",
+        "mktime",
+        "snprintf",
+        "sprintf",
+        "stpncpy",
+        "strcat",
+        "strchr",
+        "strcmp",
+        "strcpy",
+        "strdup",
+        "strlcat",
+        "strlcpy",
+        "strlen",
+        "strncat",
+        "strncmp",
+        "strncpy",
+        "strnlen",
+        "strrchr",
+        "open",
+        "_open_osfhandle",
+        "pause",
+        "rand",
+        "realloc",
+        "rmdir",
+        "SecureZeroMemory",
+        "setenv",
+        "SetEnvironmentVariableW",
+        "SetStdHandle",
+        "Sleep",
+        "srand",
+        "strerror",
+        "strptime",
+        "tempnam",
+        "u8_isvalid",
+        "unsetenv",
+        "usleep",
+        "utf8proc_category",
+        "utf8proc_category_string",
+        "utf8proc_charwidth",
+        "utf8proc_decompose",
+        "utf8proc_errmsg",
+        "utf8proc_grapheme_break",
+        "utf8proc_grapheme_break_stateful",
+        "utf8proc_reencode",
+        "utf8proc_tolower",
+        "utf8proc_totitle",
+        "utf8proc_toupper",
+        "uv_chdir",
+        "uv_cpu_info",
+        "uv_cwd",
+        "uv_err_name",
+        "uv_fileno",
+        "uv_free_cpu_info",
+        "uv_fs_get_result",
+        "uv_get_free_memory",
+        "uv_get_process_title",
+        "uv_get_total_memory",
+        "uv_guess_handle",
+        "uv_handle_size",
+        "uv_is_readable",
+        "uv_is_writable",
+        "uv_loadavg",
+        "uv_os_homedir",
+        "uv_os_tmpdir",
+        "uv_pipe",
+        "uv_pipe_open",
+        "uv_process_kill",
+        "uv_req_size",
+        "uv_set_process_title",
+        "uv_strerror",
+        "uv_timer_get_repeat",
+        "uv_tty_get_winsize",
+        "uv_uptime",
+        "vsnprintf",
+        "vsprintf",
+        "wcsftime",
+        "wcslen",
+        "_wrmdir",
+    };
+    return funcs.count(name) != 0;
+}
+
 struct BBState {
     // Uses in this BB
     // These do not get updated after local analysis
@@ -1527,7 +1794,7 @@ State LateLowerGCFrame::LocalScan(Function &F) {
                     if (callee == pointer_from_objref_func || callee == gc_preserve_begin_func ||
                         callee == gc_preserve_end_func || callee == typeof_func ||
                         callee == ptls_getter ||
-                        callee == write_barrier_func || callee->getName() == "memcmp") {
+                        callee == write_barrier_func || isNotSafepointFunc(callee->getName())) {
                         continue;
                     }
                     if (callee->hasFnAttribute(Attribute::ReadNone) ||
@@ -1540,7 +1807,8 @@ State LateLowerGCFrame::LocalScan(Function &F) {
                     }
                 }
                 if (isa<IntrinsicInst>(CI) || CI->hasFnAttr(Attribute::ArgMemOnly) ||
-                    CI->hasFnAttr(Attribute::ReadNone) || CI->hasFnAttr(Attribute::ReadOnly)) {
+                    CI->hasFnAttr(Attribute::ReadNone) || CI->hasFnAttr(Attribute::ReadOnly) ||
+                    CI->getMetadata("julia.notsafepoint")) {
                     // Intrinsics are never safepoints.
                     continue;
                 }
-- 
2.28.0

