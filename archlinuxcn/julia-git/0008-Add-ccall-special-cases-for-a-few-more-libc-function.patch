From 0d434a634564de60e2b03cd38391a0121cbcba85 Mon Sep 17 00:00:00 2001
From: Yichao Yu <yyc1992@gmail.com>
Date: Fri, 21 Aug 2020 10:29:29 -0400
Subject: [PATCH 08/10] Add ccall special cases for a few more libc functions
 that LLVM is aware of

Includes ones that are used in base and ones that LLVM can most likely
take advantage of (inlining or useful attribute like readonly).

AFAICT, LLVM does not provide a builtin way to do this automatically.
Clang also does this by keeping an internal list of known functions
in additional to the LLVM one.
---
 src/ccall.cpp   | 116 +++++++++++++++++++++++++++++++++++++++++++++++-
 src/codegen.cpp |  17 +++++--
 2 files changed, 128 insertions(+), 5 deletions(-)

diff --git a/src/ccall.cpp b/src/ccall.cpp
index 4d66cb7610..26e7cc8417 100644
--- a/src/ccall.cpp
+++ b/src/ccall.cpp
@@ -1250,7 +1250,7 @@ static jl_cgval_t emit_ccall(jl_codectx_t &ctx, jl_value_t **args, size_t nargs)
     };
 
     auto _is_libjulia_func = [&] (uintptr_t ptr, const char *name) {
-        if ((uintptr_t)fptr == ptr)
+        if (ptr && (uintptr_t)fptr == ptr)
             return true;
         return (!f_lib || f_lib == JL_DL_LIBNAME) && f_name && !strcmp(f_name, name);
     };
@@ -1674,6 +1674,120 @@ static jl_cgval_t emit_ccall(jl_codectx_t &ctx, jl_value_t **args, size_t nargs)
         return rt == (jl_value_t*)jl_nothing_type ? ghostValue(jl_nothing_type) :
             mark_or_box_ccall_result(ctx, destp, retboxed, rt, unionall, static_rt);
     }
+    else if (is_libjulia_func(memmove) && (rt == (jl_value_t*)jl_nothing_type || jl_is_cpointer_type(rt))) {
+        const jl_cgval_t &dst = argv[0];
+        const jl_cgval_t &src = argv[1];
+        const jl_cgval_t &n = argv[2];
+        Value *destp = emit_unbox(ctx, T_size, dst, (jl_value_t*)jl_voidpointer_type);
+
+        ctx.builder.CreateMemMove(
+                emit_inttoptr(ctx, destp, T_pint8),
+#if JL_LLVM_VERSION >= 100000
+                MaybeAlign(1),
+#else
+                1,
+#endif
+                emit_inttoptr(ctx,
+                    emit_unbox(ctx, T_size, src, (jl_value_t*)jl_voidpointer_type),
+                    T_pint8),
+#if JL_LLVM_VERSION >= 100000
+                MaybeAlign(0),
+#else
+                0,
+#endif
+                emit_unbox(ctx, T_size, n, (jl_value_t*)jl_ulong_type),
+                false);
+        JL_GC_POP();
+        return rt == (jl_value_t*)jl_nothing_type ? ghostValue(jl_nothing_type) :
+            mark_or_box_ccall_result(ctx, destp, retboxed, rt, unionall, static_rt);
+    }
+    else if (is_libjulia_func(memset) && (rt == (jl_value_t*)jl_nothing_type || jl_is_cpointer_type(rt))) {
+        const jl_cgval_t &dst = argv[0];
+        const jl_cgval_t &val = argv[1];
+        const jl_cgval_t &n = argv[2];
+        Value *destp = emit_unbox(ctx, T_size, dst, (jl_value_t*)jl_voidpointer_type);
+
+        ctx.builder.CreateMemSet(
+            emit_inttoptr(ctx, destp, T_pint8),
+            ctx.builder.CreateTrunc(emit_unbox(ctx, T_int32, val, (jl_value_t*)jl_int32_type),
+                                    T_int8),
+            emit_unbox(ctx, T_size, n, (jl_value_t*)jl_ulong_type),
+#if JL_LLVM_VERSION >= 100000
+            MaybeAlign(1),
+#else
+            1,
+#endif
+            false);
+        JL_GC_POP();
+        return rt == (jl_value_t*)jl_nothing_type ? ghostValue(jl_nothing_type) :
+            mark_or_box_ccall_result(ctx, destp, retboxed, rt, unionall, static_rt);
+    }
+    else if ((is_libjulia_func(memcmp) || is_libjulia_func(strncmp)) &&
+             (rt == (jl_value_t*)jl_int32_type || rt == (jl_value_t*)jl_uint32_type)) {
+        Value *p1 = emit_unbox(ctx, T_size, argv[0], (jl_value_t*)jl_voidpointer_type);
+        Value *p2 = emit_unbox(ctx, T_size, argv[1], (jl_value_t*)jl_voidpointer_type);
+        Value *n = emit_unbox(ctx, T_size, argv[2], (jl_value_t*)jl_ulong_type);
+        p1 = emit_inttoptr(ctx, p1, T_pint8);
+        p2 = emit_inttoptr(ctx, p2, T_pint8);
+        Value *res;
+        if (is_libjulia_func(memcmp)) {
+            res = ctx.builder.CreateCall(prepare_call(memcmp_func), { p1, p2, n });
+        }
+        else {
+            auto FT = FunctionType::get(T_int32, {T_pint8, T_pint8, T_size}, false);
+            auto attrs = get_attrs_rdonly(jl_LLVMContext, {0, 1});
+            auto callee = jl_Module->getOrInsertFunction("strncmp", FT, attrs);
+            res = ctx.builder.CreateCall(callee, { p1, p2, n });
+        }
+        JL_GC_POP();
+        return mark_or_box_ccall_result(ctx, res, retboxed, rt, unionall, static_rt);
+    }
+    else if (is_libjulia_func(strcmp) && (rt == (jl_value_t*)jl_int32_type ||
+                                          rt == (jl_value_t*)jl_uint32_type)) {
+        Value *p1 = emit_unbox(ctx, T_size, argv[0], (jl_value_t*)jl_voidpointer_type);
+        Value *p2 = emit_unbox(ctx, T_size, argv[1], (jl_value_t*)jl_voidpointer_type);
+        p1 = emit_inttoptr(ctx, p1, T_pint8);
+        p2 = emit_inttoptr(ctx, p2, T_pint8);
+        auto FT = FunctionType::get(T_int32, {T_pint8, T_pint8}, false);
+        auto attrs = get_attrs_rdonly(jl_LLVMContext, {0, 1});
+        auto callee = jl_Module->getOrInsertFunction("strcmp", FT, attrs);
+        Value *res = ctx.builder.CreateCall(callee, { p1, p2 });
+        JL_GC_POP();
+        return mark_or_box_ccall_result(ctx, res, retboxed, rt, unionall, static_rt);
+    }
+    else if (is_libjulia_func(strlen) && (rt == (jl_value_t*)jl_long_type ||
+                                          rt == (jl_value_t*)jl_ulong_type)) {
+        Value *p = emit_unbox(ctx, T_size, argv[0], (jl_value_t*)jl_voidpointer_type);
+        auto *FT = FunctionType::get(T_size, {T_pint8}, false);
+        auto attrs = get_attrs_rdonly(jl_LLVMContext, {0});
+        auto callee = jl_Module->getOrInsertFunction("strlen", FT, attrs);
+        auto res = ctx.builder.CreateCall(callee, emit_inttoptr(ctx, p, T_pint8));
+        JL_GC_POP();
+        return mark_or_box_ccall_result(ctx, res, retboxed, rt, unionall, static_rt);
+    }
+    else if ((_is_libjulia_func(0, "strchr") || _is_libjulia_func(0, "strrchr")) &&
+             jl_is_cpointer_type(rt)) {
+        Value *p = emit_unbox(ctx, T_size, argv[0], (jl_value_t*)jl_voidpointer_type);
+        Value *v = emit_unbox(ctx, T_int32, argv[1], (jl_value_t*)jl_int32_type);
+        auto *FT = FunctionType::get(T_pint8, {T_pint8, T_int32}, false);
+        auto attrs = get_attrs_rdonly(jl_LLVMContext, {0});
+        auto callee = jl_Module->getOrInsertFunction(f_name, FT, attrs);
+        auto res = ctx.builder.CreateCall(callee, {emit_inttoptr(ctx, p, T_pint8), v});
+        JL_GC_POP();
+        return mark_or_box_ccall_result(ctx, res, retboxed, rt, unionall, static_rt);
+    }
+    else if ((_is_libjulia_func(0, "memchr") || _is_libjulia_func(0, "memrchr")) &&
+             jl_is_cpointer_type(rt)) {
+        Value *p = emit_unbox(ctx, T_size, argv[0], (jl_value_t*)jl_voidpointer_type);
+        Value *v = emit_unbox(ctx, T_int32, argv[1], (jl_value_t*)jl_int32_type);
+        Value *n = emit_unbox(ctx, T_size, argv[2], (jl_value_t*)jl_ulong_type);
+        auto *FT = FunctionType::get(T_pint8, {T_pint8, T_int32, T_size}, false);
+        auto attrs = get_attrs_rdonly(jl_LLVMContext, {0});
+        auto callee = jl_Module->getOrInsertFunction(f_name, FT, attrs);
+        auto res = ctx.builder.CreateCall(callee, {emit_inttoptr(ctx, p, T_pint8), v, n});
+        JL_GC_POP();
+        return mark_or_box_ccall_result(ctx, res, retboxed, rt, unionall, static_rt);
+    }
     else if (is_libjulia_func(jl_object_id) && nccallargs == 1 &&
             rt == (jl_value_t*)jl_ulong_type) {
         jl_cgval_t val = argv[0];
diff --git a/src/codegen.cpp b/src/codegen.cpp
index c0d40a9d80..078e3fdccb 100644
--- a/src/codegen.cpp
+++ b/src/codegen.cpp
@@ -373,6 +373,18 @@ static AttributeList get_attrs_zext(LLVMContext &C)
                 {Attributes(C, {Attribute::ZExt})});
 }
 
+// For libc functions that only read argument memory and not capturing them
+// e.g. memcmp, strlen, etc.
+static AttributeList get_attrs_rdonly(LLVMContext &C, ArrayRef<unsigned> ptrargs)
+{
+    auto attrs =  AttributeList::get(C,
+                Attributes(C, {Attribute::ReadOnly,
+                        Attribute::NoUnwind, Attribute::ArgMemOnly}),
+                AttributeSet(), None);
+    for (auto arg: ptrargs)
+        attrs = attrs.addParamAttribute(C, arg, Attribute::NoCapture);
+    return attrs;
+}
 
 // global vars
 static const auto jlRTLD_DEFAULT_var = new JuliaVariable{
@@ -742,10 +754,7 @@ static const auto memcmp_func = new JuliaFunction{
     "memcmp",
     [](LLVMContext &C) { return FunctionType::get(T_int32,
             {T_pint8, T_pint8, T_size}, false); },
-    [](LLVMContext &C) { return AttributeList::get(C,
-            Attributes(C, {Attribute::ReadOnly, Attribute::NoUnwind, Attribute::ArgMemOnly}),
-            AttributeSet(),
-            None); },
+    [](LLVMContext &C) { return get_attrs_rdonly(C, {0, 1}); },
     // TODO: inferLibFuncAttributes(*memcmp_func, TLI);
 };
 static const auto jldlsym_func = new JuliaFunction{
-- 
2.28.0

