From 3cb44b2f4342fb901502b7fee2b5e6fe9fe1f436 Mon Sep 17 00:00:00 2001
From: Yichao Yu <yyc1992@gmail.com>
Date: Sat, 29 Aug 2020 22:23:08 -0400
Subject: [PATCH 09/10] Improve alias analysis on julia.typeof and memcmp

* `julia.typeof` is a pure function of the pointer itself within the lifetime of the object
  so it can be treated as readnone until we expose write to the type tag (during allocation)
  to LLVM.
* The TBAA metadata can be applied to all functions that access only argument memory or
  inaccessible memory. Mark it on `memcmp` as well.
---
 src/cgutils.cpp | 10 +++++-----
 src/codegen.cpp | 21 ++++++++++++++++++---
 2 files changed, 23 insertions(+), 8 deletions(-)

diff --git a/src/cgutils.cpp b/src/cgutils.cpp
index 573d809244..ea98250aac 100644
--- a/src/cgutils.cpp
+++ b/src/cgutils.cpp
@@ -2,12 +2,12 @@
 
 // utility procedures used in code generation
 
-static Instruction *tbaa_decorate(MDNode *md, Instruction *load_or_store)
+static Instruction *tbaa_decorate(MDNode *md, Instruction *inst)
 {
-    load_or_store->setMetadata(llvm::LLVMContext::MD_tbaa, md);
-    if (isa<LoadInst>(load_or_store) && md == tbaa_const)
-        load_or_store->setMetadata(LLVMContext::MD_invariant_load, MDNode::get(md->getContext(), None));
-    return load_or_store;
+    inst->setMetadata(llvm::LLVMContext::MD_tbaa, md);
+    if (isa<LoadInst>(inst) && md == tbaa_const)
+        inst->setMetadata(LLVMContext::MD_invariant_load, MDNode::get(md->getContext(), None));
+    return inst;
 }
 
 static Value *track_pjlvalue(jl_codectx_t &ctx, Value *V)
diff --git a/src/codegen.cpp b/src/codegen.cpp
index 40c93ee537..353035cd23 100644
--- a/src/codegen.cpp
+++ b/src/codegen.cpp
@@ -683,12 +683,15 @@ static const auto jl_newbits_func = new JuliaFunction{
             Attributes(C, {Attribute::NonNull}),
             None); },
 };
+// `julia.typeof` does read memory, but it is effectively readnone before we lower
+// the allocation function. This is OK as long as we lower `julia.typeof` no later than
+// `julia.gc_alloc_obj`.
 static const auto jl_typeof_func = new JuliaFunction{
     "julia.typeof",
     [](LLVMContext &C) { return FunctionType::get(T_prjlvalue,
                 {T_prjlvalue}, false); },
     [](LLVMContext &C) { return AttributeList::get(C,
-            Attributes(C, {Attribute::ReadOnly, Attribute::NoUnwind, Attribute::ArgMemOnly, Attribute::NoRecurse}),
+            Attributes(C, {Attribute::ReadNone, Attribute::NoUnwind, Attribute::NoRecurse}),
             Attributes(C, {Attribute::NonNull}),
             None); },
 };
@@ -1180,7 +1183,7 @@ static CallInst *emit_jlcall(jl_codectx_t &ctx, JuliaFunction *theFptr, Value *t
 
 static Value *literal_pointer_val(jl_codectx_t &ctx, jl_value_t *p);
 static GlobalVariable *prepare_global_in(Module *M, GlobalVariable *G);
-static Instruction *tbaa_decorate(MDNode *md, Instruction *load_or_store);
+static Instruction *tbaa_decorate(MDNode *md, Instruction *inst);
 
 static GlobalVariable *prepare_global_in(Module *M, JuliaVariable *G)
 {
@@ -2486,11 +2489,23 @@ static Value *emit_bits_compare(jl_codectx_t &ctx, jl_cgval_t arg1, jl_cgval_t a
             if ((gc_uses[nroots] = get_gc_root_for(arg2)))
                 nroots++;
             OperandBundleDef OpBundle("jl_roots", makeArrayRef(gc_uses, nroots));
-            Value *answer = ctx.builder.CreateCall(prepare_call(memcmp_func), {
+            auto answer = ctx.builder.CreateCall(prepare_call(memcmp_func), {
                         ctx.builder.CreateBitCast(varg1, T_pint8),
                         ctx.builder.CreateBitCast(varg2, T_pint8),
                         ConstantInt::get(T_size, sz) },
                     ArrayRef<OperandBundleDef>(&OpBundle, nroots ? 1 : 0));
+            MDNode *tbaa = nullptr;
+            if (!arg1.tbaa) {
+                tbaa = arg2.tbaa;
+            }
+            else if (!arg2.tbaa) {
+                tbaa = arg1.tbaa;
+            }
+            else {
+                tbaa = MDNode::getMostGenericTBAA(arg1.tbaa, arg2.tbaa);
+            }
+            if (tbaa)
+                tbaa_decorate(tbaa, answer);
             return ctx.builder.CreateICmpEQ(answer, ConstantInt::get(T_int32, 0));
         }
         else {
-- 
2.28.0

