From 6d93cee1415cd36ddf4173424d7cc30875119931 Mon Sep 17 00:00:00 2001
From: Yichao Yu <yyc1992@gmail.com>
Date: Sat, 25 Jul 2020 15:44:41 -0400
Subject: [PATCH] Optimize Int8 and UInt8 boxing.

---
 src/cgutils.cpp               | 27 +++++++++++++++++++++++++--
 src/codegen.cpp               | 14 ++++++++++++--
 src/datatype.c                | 17 +++++++++++------
 src/llvm-late-gc-lowering.cpp |  4 ++++
 4 files changed, 52 insertions(+), 10 deletions(-)

diff --git a/src/cgutils.cpp b/src/cgutils.cpp
index bf6775b5d0..81e9127786 100644
--- a/src/cgutils.cpp
+++ b/src/cgutils.cpp
@@ -386,6 +386,17 @@ static Value *literal_pointer_val(jl_codectx_t &ctx, jl_value_t *p)
         return V_null;
     if (!imaging_mode)
         return literal_static_pointer_val(p);
+    if (jl_is_int8(p) || jl_is_uint8(p)) {
+        auto jvar = jl_is_int8(p) ? jlboxed_int8 : jlboxed_uint8;
+        Constant *gv = prepare_global_in(jl_Module, jvar);
+        uint8_t value;
+        memcpy(&value, p, 1);
+        Constant *idx[] = {ConstantInt::get(T_int32, 0),
+                           ConstantInt::get(T_int32, value * 2 + 1)};
+        return ConstantExpr::getBitCast(
+            ConstantExpr::getInBoundsGetElementPtr(jvar->_type(jl_Module->getContext()),
+                                                   gv, idx), T_pjlvalue);
+    }
     Value *pgv = literal_pointer_val_slot(ctx, p);
     return tbaa_decorate(tbaa_const, maybe_mark_load_dereferenceable(
             ctx.builder.CreateAlignedLoad(T_pjlvalue, pgv, sizeof(void*)),
@@ -2186,6 +2197,18 @@ static Value *as_value(jl_codectx_t &ctx, Type *to, const jl_cgval_t &v)
     return emit_unbox(ctx, to, v, v.typ);
 }
 
+static Value *get_i8box(jl_codectx_t &ctx, Value *v, jl_datatype_t *ty)
+{
+    auto jvar = ty == jl_int8_type ? jlboxed_int8 : jlboxed_uint8;
+    Constant *gv = prepare_global_in(jl_Module, jvar);
+    Value *idx1 = ctx.builder.CreateZExt(v, T_int32);
+    idx1 = ctx.builder.CreateMul(idx1, ConstantInt::get(T_int32, 2));
+    idx1 = ctx.builder.CreateAdd(idx1, ConstantInt::get(T_int32, 1));
+    Value *idx[] = {ConstantInt::get(T_int32, 0), idx1};
+    return ctx.builder.CreateBitCast(ctx.builder.CreateInBoundsGEP(gv, idx),
+                                     T_pjlvalue);
+}
+
 // some types have special boxing functions with small-value caches
 // Returns T_prjlvalue
 static Value *_boxed_special(jl_codectx_t &ctx, const jl_cgval_t &vinfo, Type *t)
@@ -2210,7 +2233,7 @@ static Value *_boxed_special(jl_codectx_t &ctx, const jl_cgval_t &vinfo, Type *t
     assert(jl_is_datatype(jb));
     Value *box = NULL;
     if (jb == jl_int8_type)
-        box = track_pjlvalue(ctx, call_with_attrs(ctx, box_int8_func, as_value(ctx, t, vinfo)));
+        box = track_pjlvalue(ctx, get_i8box(ctx, as_value(ctx, t, vinfo), jb));
     else if (jb == jl_int16_type)
         box = call_with_attrs(ctx, box_int16_func, as_value(ctx, t, vinfo));
     else if (jb == jl_int32_type)
@@ -2223,7 +2246,7 @@ static Value *_boxed_special(jl_codectx_t &ctx, const jl_cgval_t &vinfo, Type *t
     //  box = ctx.builder.CreateCall(box_float64_func, as_value(ctx, t, vinfo);
     // for Float64, fall through to generic case below, to inline alloc & init of Float64 box. cheap, I know.
     else if (jb == jl_uint8_type)
-        box = track_pjlvalue(ctx, call_with_attrs(ctx, box_uint8_func, as_value(ctx, t, vinfo)));
+        box = track_pjlvalue(ctx, get_i8box(ctx, as_value(ctx, t, vinfo), jb));
     else if (jb == jl_uint16_type)
         box = call_with_attrs(ctx, box_uint16_func, as_value(ctx, t, vinfo));
     else if (jb == jl_uint32_type)
diff --git a/src/codegen.cpp b/src/codegen.cpp
index 15b2631e13..73bbc9ef98 100644
--- a/src/codegen.cpp
+++ b/src/codegen.cpp
@@ -404,6 +404,18 @@ static const auto jlgetworld_global = new JuliaVariable{
     [](LLVMContext &C) { return (Type*)T_size; },
 };
 
+static const auto jlboxed_int8 = new JuliaVariable{
+    "jl_boxed_int8",
+    true,
+    [](LLVMContext &C) { return (Type*)ArrayType::get(T_pjlvalue, 256 * 2); },
+};
+
+static const auto jlboxed_uint8 = new JuliaVariable{
+    "jl_boxed_uint8",
+    true,
+    [](LLVMContext &C) { return (Type*)ArrayType::get(T_pjlvalue, 256 * 2); },
+};
+
 static const auto jltls_states_func = new JuliaFunction{
     "julia.ptls_states",
     [](LLVMContext &C) { return FunctionType::get(PointerType::get(T_ppjlvalue, 0), false); },
@@ -746,8 +758,6 @@ static const auto box_##ct##_func = new JuliaFunction{                        \
             {at}, false); },                                                  \
     attrs,                                                                    \
 }
-BOX_FUNC(int8, T_pjlvalue, T_int8, get_attrs_sext);
-BOX_FUNC(uint8, T_pjlvalue, T_int8, get_attrs_zext);
 BOX_FUNC(int16, T_prjlvalue, T_int16, get_attrs_sext);
 BOX_FUNC(uint16, T_prjlvalue, T_int16, get_attrs_zext);
 BOX_FUNC(int32, T_prjlvalue, T_int32, get_attrs_sext);
diff --git a/src/datatype.c b/src/datatype.c
index 7e78ba8a69..39cfff641d 100644
--- a/src/datatype.c
+++ b/src/datatype.c
@@ -819,15 +819,18 @@ JL_DLLEXPORT jl_value_t *jl_box_char(uint32_t x)
     return v;
 }
 
-static jl_value_t *boxed_int8_cache[256];
+JL_DLLEXPORT struct {
+    jl_taggedvalue_t tag;
+    uint8_t value;
+} jl_boxed_int8[256], jl_boxed_uint8[256];
+
 JL_DLLEXPORT jl_value_t *jl_box_int8(int8_t x)
 {
-    return boxed_int8_cache[(uint8_t)x];
+    return (jl_value_t*)&jl_boxed_int8[(uint8_t)x].value;
 }
-static jl_value_t *boxed_uint8_cache[256];
 JL_DLLEXPORT jl_value_t *jl_box_uint8(uint8_t x)
 {
-    return boxed_uint8_cache[x];
+    return (jl_value_t*)&jl_boxed_uint8[x].value;
 }
 
 void jl_init_int32_int64_cache(void)
@@ -845,7 +848,8 @@ void jl_init_int32_int64_cache(void)
 #endif
     }
     for(i=0; i < 256; i++) {
-        boxed_uint8_cache[i] = jl_permbox8(jl_uint8_type, i);
+        jl_boxed_uint8[i].tag.header = ((uintptr_t)jl_uint8_type) | GC_OLD_MARKED;
+        jl_boxed_uint8[i].value = (uint8_t)i;
     }
 }
 
@@ -856,7 +860,8 @@ void jl_init_box_caches(void)
         boxed_char_cache[i] = jl_permbox32(jl_char_type, i << 24);
     }
     for(i=0; i < 256; i++) {
-        boxed_int8_cache[i] = jl_permbox8(jl_int8_type, i);
+        jl_boxed_int8[i].tag.header = ((uintptr_t)jl_int8_type) | GC_OLD_MARKED;
+        jl_boxed_int8[i].value = (uint8_t)i;
     }
     for(i=0; i < NBOX_C; i++) {
         boxed_int16_cache[i]  = jl_permbox16(jl_int16_type, i-NBOX_C/2);
diff --git a/src/llvm-late-gc-lowering.cpp b/src/llvm-late-gc-lowering.cpp
index 9b8e53eb5a..2eebc4dc93 100644
--- a/src/llvm-late-gc-lowering.cpp
+++ b/src/llvm-late-gc-lowering.cpp
@@ -1530,6 +1530,10 @@ State LateLowerGCFrame::LocalScan(Function &F) {
                             RefinedPtr.push_back(-2);
                         }
                     }
+                    else if (isa<Constant>(origin->stripInBoundsOffsets())) {
+                        // Global constant. e.g. int8/uint8 boxes
+                        RefinedPtr.push_back(-2);
+                    }
                     MaybeNoteDef(S, BBS, ASCI, BBS.Safepoints, std::move(RefinedPtr));
                 }
             } else if (auto *AI = dyn_cast<AllocaInst>(&I)) {
-- 
2.28.0

