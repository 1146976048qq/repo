From 292218f0e1d7895622f89f36bd5a1de5a7618435 Mon Sep 17 00:00:00 2001
From: Yichao Yu <yyc1992@gmail.com>
Date: Sun, 19 Jul 2020 09:40:32 -0400
Subject: [PATCH 2/7] Fix source file paths

---
 base/sysimg.jl          |  7 +++++++
 base/sysinfo.jl         |  2 +-
 etc/write_base_cache.jl |  6 +++++-
 src/ast.c               | 13 +++++++++++++
 4 files changed, 26 insertions(+), 2 deletions(-)

diff --git a/base/sysimg.jl b/base/sysimg.jl
index 893af84577..3f0c2deef0 100644
--- a/base/sysimg.jl
+++ b/base/sysimg.jl
@@ -82,6 +82,13 @@ let
 
         print_time("Stdlibs total", tot_time_stdlib)
     end
+    for i in 1:length(Base._included_files)
+        dep = Base._included_files[i]
+        newfile = ccall(:jl_map_source_filename, Ref{String}, (Any,), dep[2])
+        if newfile !== dep[2]
+            Base._included_files[i] = (dep[1], newfile)
+        end
+    end
 
     # Clear global state
     empty!(Core.ARGS)
diff --git a/base/sysinfo.jl b/base/sysinfo.jl
index 4a16d4b17b..6a338dfdde 100644
--- a/base/sysinfo.jl
+++ b/base/sysinfo.jl
@@ -51,7 +51,7 @@ A string containing the full path to the directory containing the `stdlib` packa
 STDLIB = "$BINDIR/../share/julia/stdlib/v$(VERSION.major).$(VERSION.minor)" # for bootstrap
 # In case STDLIB change after julia is built, the variable below can be used
 # to update cached method locations to updated ones.
-const BUILD_STDLIB_PATH = STDLIB
+const BUILD_STDLIB_PATH = "/usr/share/julia/stdlib/v$(VERSION.major).$(VERSION.minor)"
 
 # helper to avoid triggering precompile warnings
 
diff --git a/etc/write_base_cache.jl b/etc/write_base_cache.jl
index a81908b96a..4c463db143 100644
--- a/etc/write_base_cache.jl
+++ b/etc/write_base_cache.jl
@@ -2,7 +2,11 @@
 cachefile = ARGS[1]
 open(cachefile, "w") do io
     for (_, filename) in Base._included_files
-        src = read(filename, String)
+        if isfile(get(ENV, "JL_MAKEPKG_SRCDIR", "") * "/" * filename)
+            src = read(get(ENV, "JL_MAKEPKG_SRCDIR", "") * "/" * filename, String)
+        elseif isfile(filename)
+            src = read(filename, String)
+        end
         write(io, Int32(sizeof(filename)))
         write(io, filename)
         write(io, UInt64(sizeof(src)))
diff --git a/src/ast.c b/src/ast.c
index fc7cdbbf5e..c3579b2cb5 100644
--- a/src/ast.c
+++ b/src/ast.c
@@ -789,6 +789,18 @@ static value_t julia_to_scm_(fl_context_t *fl_ctx, jl_value_t *v)
     return julia_to_scm_noalloc2(fl_ctx, v);
 }
 
+JL_DLLEXPORT __attribute__((weak)) const char *jl_archlinux_translate_filename(const char *filename);
+
+JL_DLLEXPORT jl_value_t *jl_map_source_filename(jl_value_t *filename)
+{
+    if (__likely(!jl_archlinux_translate_filename))
+        return filename;
+    const char *new_filename = jl_archlinux_translate_filename(jl_string_data(filename));
+    if (!new_filename)
+        return filename;
+    return jl_cstr_to_string(new_filename);
+}
+
 // Parse `text` starting at 0-based `offset` and attributing the content to
 // `filename`. Return an svec of (parsed_expr, final_offset)
 JL_DLLEXPORT jl_value_t *jl_fl_parse(const char *text, size_t text_len,
@@ -813,6 +825,7 @@ JL_DLLEXPORT jl_value_t *jl_fl_parse(const char *text, size_t text_len,
     fl_context_t *fl_ctx = &ctx->fl;
     value_t fl_text = cvalue_static_cstrn(fl_ctx, text, text_len);
     fl_gc_handle(fl_ctx, &fl_text);
+    filename = jl_map_source_filename(filename);
     value_t fl_filename = cvalue_static_cstrn(fl_ctx, jl_string_data(filename),
                                               jl_string_len(filename));
     fl_gc_handle(fl_ctx, &fl_filename);
-- 
2.28.0

