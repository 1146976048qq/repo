From 479a4b4de04ef8e8bca717f0adc1d8aa10d39652 Mon Sep 17 00:00:00 2001
From: Yichao Yu <yyc1992@gmail.com>
Date: Sat, 22 Aug 2020 10:19:15 -0400
Subject: [PATCH 4/8] Optimize allocation of arrays

---
 base/boot.jl    | 12 ++---------
 src/array.c     |  8 +++++--
 src/ccall.cpp   | 56 +++++++++++++++++++++++++++++++++++++++++++++++++
 src/codegen.cpp | 51 ++++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 115 insertions(+), 12 deletions(-)

diff --git a/base/boot.jl b/base/boot.jl
index 7c8d05cc13..c6db3a37e5 100644
--- a/base/boot.jl
+++ b/base/boot.jl
@@ -445,19 +445,11 @@ const NTuple{N,T} = Tuple{Vararg{T,N}}
 struct UndefInitializer end
 const undef = UndefInitializer()
 # type and dimensionality specified, accepting dims as series of Ints
-Array{T,1}(::UndefInitializer, m::Int) where {T} =
-    ccall(:jl_alloc_array_1d, Array{T,1}, (Any, Int), Array{T,1}, m)
-Array{T,2}(::UndefInitializer, m::Int, n::Int) where {T} =
-    ccall(:jl_alloc_array_2d, Array{T,2}, (Any, Int, Int), Array{T,2}, m, n)
-Array{T,3}(::UndefInitializer, m::Int, n::Int, o::Int) where {T} =
-    ccall(:jl_alloc_array_3d, Array{T,3}, (Any, Int, Int, Int), Array{T,3}, m, n, o)
 Array{T,N}(::UndefInitializer, d::Vararg{Int,N}) where {T,N} =
     ccall(:jl_new_array, Array{T,N}, (Any, Any), Array{T,N}, d)
 # type and dimensionality specified, accepting dims as tuples of Ints
-Array{T,1}(::UndefInitializer, d::NTuple{1,Int}) where {T} = Array{T,1}(undef, getfield(d,1))
-Array{T,2}(::UndefInitializer, d::NTuple{2,Int}) where {T} = Array{T,2}(undef, getfield(d,1), getfield(d,2))
-Array{T,3}(::UndefInitializer, d::NTuple{3,Int}) where {T} = Array{T,3}(undef, getfield(d,1), getfield(d,2), getfield(d,3))
-Array{T,N}(::UndefInitializer, d::NTuple{N,Int}) where {T,N} = ccall(:jl_new_array, Array{T,N}, (Any, Any), Array{T,N}, d)
+Array{T,N}(::UndefInitializer, d::NTuple{N,Int}) where {T,N} =
+    ccall(:jl_new_array, Array{T,N}, (Any, Any), Array{T,N}, d)
 # type but not dimensionality specified
 Array{T}(::UndefInitializer, m::Int) where {T} = Array{T,1}(undef, m)
 Array{T}(::UndefInitializer, m::Int, n::Int) where {T} = Array{T,2}(undef, m, n)
diff --git a/src/array.c b/src/array.c
index b38b38188b..d3d27a4bdd 100644
--- a/src/array.c
+++ b/src/array.c
@@ -451,8 +451,7 @@ JL_DLLEXPORT jl_array_t *jl_ptr_to_array(jl_value_t *atype, void *data,
 
 JL_DLLEXPORT jl_array_t *jl_new_array(jl_value_t *atype, jl_value_t *_dims)
 {
-    size_t ndims = jl_nfields(_dims);
-    assert(is_ntuple_long(_dims));
+    size_t ndims = jl_unbox_long(jl_tparam1(atype));
     return _new_array(atype, ndims, (size_t*)_dims);
 }
 
@@ -475,6 +474,11 @@ JL_DLLEXPORT jl_array_t *jl_alloc_array_3d(jl_value_t *atype, size_t nr,
     return _new_array(atype, 3, &d[0]);
 }
 
+JL_DLLEXPORT jl_array_t *jl_alloc_array_nd(jl_value_t *atype, size_t ndims, size_t *dims)
+{
+    return _new_array(atype, ndims, dims);
+}
+
 JL_DLLEXPORT jl_array_t *jl_pchar_to_array(const char *str, size_t len)
 {
     jl_array_t *a = jl_alloc_array_1d(jl_array_uint8_type, len);
diff --git a/src/ccall.cpp b/src/ccall.cpp
index 5763239248..a3509b7587 100644
--- a/src/ccall.cpp
+++ b/src/ccall.cpp
@@ -1223,6 +1223,55 @@ static const std::string verify_ccall_sig(jl_value_t *&rt, jl_value_t *at,
     return "";
 }
 
+static Value *emit_new_array(jl_codectx_t &ctx, jl_cgval_t *argv)
+{
+    const jl_cgval_t &typ = argv[0];
+    jl_cgval_t dims = argv[1];
+    Value *_dimsv = nullptr;
+    auto dimsv = [&] {
+        if (!_dimsv) {
+            if (!dims.isghost && !dims.ispointer())
+                dims = value_to_pointer(ctx, dims);
+            auto T_psize_derived = PointerType::get(T_size, AddressSpace::Derived);
+            _dimsv = dims.isghost ? ConstantPointerNull::get(T_psize_derived) :
+                ctx.builder.CreateBitCast(
+                    decay_derived(ctx, data_pointer(ctx, dims)), T_psize_derived);
+        }
+        return _dimsv;
+    };
+    auto get_nth_dim = [&] (size_t i) -> Value* {
+        if (dims.constant)
+            return ConstantInt::get(T_size, ((size_t*)dims.constant)[i]);
+        // if the dimention type is concrete, just use getfield so that we don't
+        // have to go through memory.
+        if (dims.typ && jl_is_concrete_type(dims.typ))
+            return emit_unbox(ctx, T_size,
+                              emit_getfield_knownidx(ctx, dims, i, (jl_datatype_t*)dims.typ),
+                              (jl_value_t*)jl_long_type);
+        // Otherwise, go through memory since we know it's a `size_t*`
+        auto ptr = ctx.builder.CreateConstInBoundsGEP1_32(T_size, dimsv(), i);
+        return ctx.builder.CreateAlignedLoad(T_size, ptr, Align(sizeof(void*)));
+    };
+    size_t ndims;
+    bool known_dim = typ.constant && arraytype_constdim(typ.constant, &ndims);
+    auto typv = boxed(ctx, typ);
+    if (known_dim) {
+        if (ndims == 1)
+            return ctx.builder.CreateCall(prepare_call(jl_alloc_array_1d_func),
+                                          {typv, get_nth_dim(0)});
+        if (ndims == 2)
+            return ctx.builder.CreateCall(prepare_call(jl_alloc_array_2d_func),
+                                          {typv, get_nth_dim(0), get_nth_dim(1)});
+        if (ndims == 3)
+            return ctx.builder.CreateCall(prepare_call(jl_alloc_array_3d_func),
+                                          {typv, get_nth_dim(0), get_nth_dim(1),
+                                           get_nth_dim(2)});
+        return ctx.builder.CreateCall(prepare_call(jl_alloc_array_nd_func),
+                                      {typv, ConstantInt::get(T_size, ndims), dimsv()});
+    }
+    return ctx.builder.CreateCall(prepare_call(jl_new_array_func), {typv, dimsv()});
+}
+
 // Expr(:foreigncall, pointer, rettype, (argtypes...), nreq, cconv, args..., roots...)
 static jl_cgval_t emit_ccall(jl_codectx_t &ctx, jl_value_t **args, size_t nargs)
 {
@@ -1605,6 +1654,13 @@ static jl_cgval_t emit_ccall(jl_codectx_t &ctx, jl_value_t **args, size_t nargs)
         JL_GC_POP();
         return mark_or_box_ccall_result(ctx, load, retboxed, rt, unionall, static_rt);
     }
+    else if (is_libjulia_func(jl_new_array)) {
+        assert(lrt == T_prjlvalue);
+        assert(!isVa && !llvmcall && nccallargs == 2);
+        auto res = emit_new_array(ctx, argv);
+        JL_GC_POP();
+        return mark_or_box_ccall_result(ctx, res, retboxed, rt, unionall, static_rt);
+    }
     else if (is_libjulia_func(jl_array_isassigned) &&
              argv[1].typ == (jl_value_t*)jl_ulong_type) {
         assert(!isVa && !llvmcall && nccallargs == 2);
diff --git a/src/codegen.cpp b/src/codegen.cpp
index be9aaf0758..ffcbe5db05 100644
--- a/src/codegen.cpp
+++ b/src/codegen.cpp
@@ -439,6 +439,57 @@ static const auto jlsplatnew_func = new JuliaFunction{
             {T_prjlvalue, T_prjlvalue}, false); },
     get_func_attrs,
 };
+static const auto jl_new_array_func = new JuliaFunction{
+    "jl_new_array",
+    [](LLVMContext &C) { return FunctionType::get(
+            T_prjlvalue, {T_prjlvalue, PointerType::get(T_size, AddressSpace::Derived)}, false); },
+    [](LLVMContext &C) { return AttributeList::get(C,
+            AttributeSet(),
+            Attributes(C, {Attribute::NonNull, Attribute::NoAlias}),
+            {Attributes(C, {Attribute::ReadOnly, Attribute::NoCapture}),
+             Attributes(C, {Attribute::ReadOnly, Attribute::NoCapture})}); },
+};
+static const auto jl_alloc_array_1d_func = new JuliaFunction{
+    "jl_alloc_array_1d",
+    [](LLVMContext &C) { return FunctionType::get(
+            T_prjlvalue, {T_prjlvalue, T_size}, false); },
+    [](LLVMContext &C) { return AttributeList::get(C,
+            AttributeSet(),
+            Attributes(C, {Attribute::NonNull, Attribute::NoAlias}),
+            {Attributes(C, {Attribute::ReadOnly, Attribute::NoCapture}),
+             AttributeSet()}); },
+};
+static const auto jl_alloc_array_2d_func = new JuliaFunction{
+    "jl_alloc_array_2d",
+    [](LLVMContext &C) { return FunctionType::get(
+            T_prjlvalue, {T_prjlvalue, T_size, T_size}, false); },
+    [](LLVMContext &C) { return AttributeList::get(C,
+            AttributeSet(),
+            Attributes(C, {Attribute::NonNull, Attribute::NoAlias}),
+            {Attributes(C, {Attribute::ReadOnly, Attribute::NoCapture}),
+             AttributeSet(), AttributeSet()}); },
+};
+static const auto jl_alloc_array_3d_func = new JuliaFunction{
+    "jl_alloc_array_3d",
+    [](LLVMContext &C) { return FunctionType::get(
+            T_prjlvalue, {T_prjlvalue, T_size, T_size, T_size}, false); },
+    [](LLVMContext &C) { return AttributeList::get(C,
+            AttributeSet(),
+            Attributes(C, {Attribute::NonNull, Attribute::NoAlias}),
+            {Attributes(C, {Attribute::ReadOnly, Attribute::NoCapture}),
+             AttributeSet(), AttributeSet(), AttributeSet()}); },
+};
+static const auto jl_alloc_array_nd_func = new JuliaFunction{
+    "jl_alloc_array_nd",
+    [](LLVMContext &C) { return FunctionType::get(
+            T_prjlvalue, {T_prjlvalue, T_size, PointerType::get(T_size, AddressSpace::Derived)}, false); },
+    [](LLVMContext &C) { return AttributeList::get(C,
+            AttributeSet(),
+            Attributes(C, {Attribute::NonNull, Attribute::NoAlias}),
+            {Attributes(C, {Attribute::ReadOnly, Attribute::NoCapture}),
+             AttributeSet(),
+             Attributes(C, {Attribute::ReadOnly, Attribute::NoCapture})}); },
+};
 static const auto jlthrow_func = new JuliaFunction{
     "jl_throw",
     [](LLVMContext &C) { return FunctionType::get(T_void,
-- 
2.28.0

