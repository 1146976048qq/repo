# Maintainer: Yichao Yu <yyc1992@gmail.com>
# Contributor: Lex Black <autumn-wind at web dot de>
# Contributor: Michael Jakl <jakl.michael@gmail.com>
# With contributions from many kind people at https://aur.archlinux.org/packages/julia-git/

BUILD_DOC=1

pkgbase=julia-git
pkgname=(julia-git)

if [[ $CARCH != x86_64 ]]; then
  BUILD_DOC=0
fi

if ((BUILD_DOC)); then
  pkgname+=('julia-git-docs')
fi

case $CARCH in
  x86_64|i686|aarch64|armv7h)
    makedepends_llvm=("llvm-julia>=10.0" "llvm-julia<11.0")
    depends_llvm=("llvm-libs-julia>=10.0" "llvm-libs-julia<11.0")
    ;;
  # armv7h)
  #   makedepends_llvm=("llvm-svn")
  #   depends_llvm=("llvm-libs-svn")
  #   ;;
  *)
    echo "Unsupported Arch \"$CARCH\"" >&2
    ;;
esac

epoch=1
pkgver=1.6.0.DEV.925.ged72fa23b31
pkgrel=1
pkgdesc="Julia is a high-level, high-performance, dynamic programming language."
arch=('i686' 'x86_64' 'armv7h' 'aarch64')
url="http://julialang.org"
license=('GPL')
depends_libs=(arpack fftw gmp libgit2-julia libunwind-git mpfr pcre2 suitesparse
              openspecfun openblas-lapack libutf8proc-git
              openlibm mbedtls libssh2 zlib p7zip curl libnghttp2 ca-certificates-utils)
makedepends=("${depends_libs[@]}" "${makedepends_llvm[@]}"
             gcc-fortran git patchelf python)
options=('debug' '!strip' '!buildflags')
_patches=(
  0001-Allow-system-libnghttp2.patch
  0002-Fix-source-file-paths.patch
  0003-Optimize-allocation-of-arrays.patch
  0004-Enable-basic-AA-in-O2.patch
  0005-Add-ccall-special-cases-for-a-few-more-libc-function.patch
  0006-Optimize-objectid-in-codegen.patch
  0007-Mark-more-functions-as-not-safepoint-in-codegen.patch
)
source=('git://github.com/JuliaLang/julia'
        "${_patches[@]}"
        gdb-debug.diff
        julia-compile-pkgs.jl
        julia-clear-precompile.sh
        julia-precompile.hook
        julia-clear-precompile.hook
        arch-source-translate.cpp)
md5sums=('SKIP'
         '80a3feb505691352da0ca23339d3dd41'
         'b634ce07d9b70b0762660248d462c23f'
         '2a1968a1dbeb305e146639797594762a'
         '949522f85f0bbe9f3dcd664e41d54eb3'
         '65fd12926465f42eb022cce47f7fd804'
         '28c977ecb6a4d1e8624cae979e54cd5f'
         '0d4bcd3b02457d49dfaa2b82de21d2b4'
         'effd2c21ffb69e66b43d4b7fbe074a51'
         'bde100b283ea5b7aaf80613abec98a57'
         '6e7fcba300512df8ab8ab65d3e1eb847'
         'f1f6ffc7ddcbc7fa0000d6f5fdbbe925'
         'f9d0b11988630599dc860a5b33a7ba13'
         '1bf92fe1bc71f4b052deaf7fc7505501')

pkgver() {
  cd julia

  last_tag=$(git describe --tags --abbrev=0)

  #collect the contents
  commit_short=$(git rev-parse --short HEAD)
  verchanged=$(git blame -L ,1 -sl -- VERSION | cut -f 1 -d " ")
  build_number=$(git rev-list --count HEAD "^$verchanged")
  # Combine version from VERSION file with rev-count and latest commit
  printf "%s.%s.g%s" "$(git show HEAD:VERSION | sed 's/-/./g')" \
         "$build_number" "$commit_short"
}

julia_opts=(prefix=/usr sysconfdir=/etc
            USE_SYSTEM_LLVM=1
            USE_SYSTEM_OPENLIBM=1
            USE_SYSTEM_LIBUNWIND=1
            USE_SYSTEM_PCRE=1
            USE_SYSTEM_OPENSPECFUN=1
            USE_SYSTEM_BLAS=1
            USE_SYSTEM_LAPACK=1
            USE_SYSTEM_FFTW=1
            USE_SYSTEM_GMP=1
            USE_SYSTEM_MPFR=1
            USE_SYSTEM_ARPACK=1
            USE_SYSTEM_SUITESPARSE=1
            USE_SYSTEM_UTF8PROC=1
            USE_SYSTEM_LIBGIT2=1
            USE_SYSTEM_LIBSSH2=1
            USE_SYSTEM_MBEDTLS=1
            USE_SYSTEM_CURL=1
            USE_SYSTEM_PATCHELF=1
            USE_SYSTEM_ZLIB=1
            USE_SYSTEM_P7ZIP=1
            USE_SYSTEM_NGHTTP2=1
            USE_LLVM_SHLIB=1
            USE_BINARYBUILDER=0
            LLVM_USE_CMAKE=0 # Workaround LLVM linking with system LLVM
            LIBBLASNAME=libopenblas
            LIBBLAS=-lopenblas
            LIBLAPACKNAME=libopenblas
            LIBLAPACK=-lopenblas
            BUNDLE_DEBUG_LIBS=1)

_x86_target='generic,opt_size;haswell,clone_all,-rdrnd;skylake,base(1),-rdrnd,-rdseed,-rtm;cannonlake,base(1),-rdrnd,-rdseed,-rtm'
_arm_target='armv7-a;armv7-a,neon;armv7-a,neon,vfp4'
_aa64_target='generic;cortex-a57;thunderx2t99'

case "$CARCH" in
  x86_64)
    julia_opts=("${julia_opts[@]}" MARCH=x86-64 JULIA_CPU_TARGET="${_x86_target}")
    ;;
  i686)
    julia_opts=("${julia_opts[@]}" MARCH=pentium4 JULIA_CPU_TARGET="${_x86_target}")
    ;;
  aarch64)
    julia_opts=("${julia_opts[@]}" MARCH=armv8-a JULIA_CPU_TARGET="${_aa64_target}")
    ;;
  armv7h)
    julia_opts=("${julia_opts[@]}" MARCH=armv7-a JULIA_CPU_TARGET="${_arm_target}")
    ;;
esac

_apply_patch() {
  echo "Applying $1"
  patch -Np1 < "../$1"
}

prepare() {
  rm -rf bin/
  mkdir -p bin/

  for p in cc c++ gcc g++; do
    cat > bin/$p <<EOF
exec /usr/bin/$p "\${@/#-O0/-Og}" -fasynchronous-unwind-tables
EOF
    chmod +x bin/$p
  done

  cd julia

  git reset --hard HEAD
  git clean -fdx

  for p in "${_patches[@]}" gdb-debug.diff; do
    _apply_patch "$p"
  done

  sed -i -e 's/-fno-omit-frame-pointer/-fomit-frame-pointer/g' src/Makefile ui/Makefile
}

build_in() {
  cd "$1"

  export JL_MAKEPKG_SRCDIR="${PWD}"

  opts=("${@:3}")
  export PATH="${srcdir}/bin:${PATH}"
  if [[ $CARCH = i686 ]]; then
    CFLAGS="${CFLAGS//-march=i686/-march=pentium4} -march=pentium4"
    CXXFLAGS="${CXXFLAGS//-march=i686/-march=pentium4} -march=pentium4"
  fi
  CFLAGS+=" -ffile-prefix-map=${srcdir}=${DBGSRCDIR:-/usr/src/debug}"
  CXXFLAGS+=" -ffile-prefix-map=${srcdir}=${DBGSRCDIR:-/usr/src/debug}"
  export CFLAGS+=' -Wno-pedantic -Wno-clobbered'
  export CXXFLAGS+=' -Wno-pedantic -Wno-clobbered'

  ver=$(cat VERSION | cut -f 1-2 -d '.')

  make "${opts[@]}" -C base version_git.jl.phony
  make "${opts[@]}" -C deps
  make "${opts[@]}" julia-ui-release
  make "${opts[@]}" release debug
  # TODO docless build
  JL_MAKEPKG_SRCDIR= make "${opts[@]}" docs

  # Check to detect issues like JuliaLang/julia#13820
  LD_PRELOAD= JL_MAKEPKG_SRCDIR= usr/bin/julia -e '0'
  LD_PRELOAD= JL_MAKEPKG_SRCDIR= usr/bin/julia-debug -e '0'
}

build() {
  if [[ $(vercmp $(g++ -dumpversion) 10) = -1 ]]; then
    g20=gnu++2a
  else
    g20=gnu++20
  fi
  g++ -fPIC -Wall -Wextra -shared -o libarch-source-translate.so -O2 \
      -std=$g20 arch-source-translate.cpp
  _ld_preload="${srcdir}/libarch-source-translate.so"
  if [[ -n $LD_PRELOAD ]]; then
    _ld_preload="${_ld_preload}:$LD_PRELOAD"
  fi
  (LD_PRELOAD="${_ld_preload}" build_in julia $BUILD_DOC "${julia_opts[@]}")
}

_source_files() {
  LANG=C readelf "$1" --debug-dump | \
    awk '/DW_AT_name +:/{name=$8}/DW_AT_comp_dir +:/{{if (name == "<artificial>") next}{if (name !~ /^[<\/]/) {printf "%s/", $8}}{print name}}'
}

package-julia-in() {
  arch=('i686' 'x86_64' 'armv7h' 'aarch64')
  depends=("${depends_libs[@]}" "${depends_llvm[@]}"
           hicolor-icon-theme xdg-utils)
  opts=("${@:2}")

  cd "$1"

  export JL_MAKEPKG_SRCDIR="${PWD}"

  # TODO docless build
  # if ((BUILD_DOC)); then
  make install DESTDIR="$pkgdir" "${opts[@]}"
  # else
  #   make install-nodoc DESTDIR="$pkgdir" "${opts[@]}"
  #   # Manually install man pages
  #   mkdir -p "$pkgdir"/usr/share/man/man1/
  #   install -m644 -t "$pkgdir"/usr/share/man/man1/ usr/share/man/man1/julia.1
  # fi

  # Remove doc files (should be non for nodoc install)
  rm -rf "$pkgdir/usr/share/doc/julia"

  ver=$("$pkgdir/usr/bin/julia" \
          --startup-file=no \
          -e 'print(VERSION.major, ".", VERSION.minor, ".", VERSION.patch)')
  ver_short=$("$pkgdir/usr/bin/julia" \
                --startup-file=no \
                -e 'print(VERSION.major, ".", VERSION.minor)')
  stdlib_dir="$pkgdir/usr/share/julia/stdlib/v$ver_short"
  builtin_pkgs=()
  for pkg in $(ls -1 "$stdlib_dir"); do
    if [[ -f "$stdlib_dir/$pkg/Project.toml" ]]; then
      builtin_pkgs=("${builtin_pkgs[@]}" "julia-${pkg,,}")
    fi
  done
  provides=("julia=2:$ver" "${builtin_pkgs[@]}")
  conflicts=('julia' "${builtin_pkgs[@]}")
  replaces=("${builtin_pkgs[@]}")

  install -Dm644 ../julia-compile-pkgs.jl "${pkgdir}/usr/lib/julia/"
  install -Dm644 ../julia-clear-precompile.sh "${pkgdir}/usr/lib/julia/"
  sed "s|@VER@|$ver_short|" ../julia-precompile.hook |
    install -Dm644 /dev/stdin "${pkgdir}/usr/share/libalpm/hooks/julia-precompile.hook"
  sed "s|@VER@|$ver_short|" ../julia-clear-precompile.hook |
    install -Dm644 /dev/stdin "${pkgdir}/usr/share/libalpm/hooks/julia-clear-precompile.hook"
  mkdir -p "${pkgdir}/usr/share/julia/compiled/v$ver_short"

  mkdir -p "${pkgdir}/usr/share/julia/contrib"
  install -m644 -t "${pkgdir}/usr/share/julia/contrib" contrib/generate_precompile.jl

  # From ca-certificates-utils, needed by Download stdlib
  ln -sf /etc/ssl/cert.pem "${pkgdir}/usr/share/julia/cert.pem"

  # Without stripping, makepkg doesn't copy the source for us...
  dbgsrcdir="${DBGSRCDIR:-/usr/src/debug}"
  for binary in usr/bin/julia usr/bin/julia-debug \
                              usr/lib/libjulia.so usr/lib/libjulia-debug.so; do
    binary="${pkgdir}/${binary}"
    # copy source files to debug directory
    local f t
    while IFS= read -r t; do
      f=${t/${dbgsrcdir}/"$srcdir"}
      mkdir -p  "${pkgdir}/${t%/*}"
      cp -- "$f" "${pkgdir}/${t%/*}"
    done < <(_source_files "$binary")
  done
  # Files that are not compiled directly aren't being copied by the code above.
  # This include all headers as well as come cpp files
  #   (e.g. `cgutils.cpp`, `processor_*.cpp` etc)
  # that are included from other files. Copy these directly for now.
  cp src/*.{c,cpp} "${pkgdir}/${dbgsrcdir}/julia/src/"
  (
    cd "${pkgdir}/usr/include/julia"
    mkdir -p "${pkgdir}/${dbgsrcdir}/julia/src/"
    for f in *; do
      ln -sf "/usr/include/julia/$f" "${pkgdir}/${dbgsrcdir}/julia/src/$f"
    done
  )
}

package_julia-git() {
  export LD_PRELOAD="${srcdir}/libarch-source-translate.so:$LD_PRELOAD"
  package-julia-in julia "${julia_opts[@]}"
  if [[ "$CARCH" = x86_64 ]]; then
    replaces=(julia-git-avx2)
  fi
}

package_julia-git-docs() {
  arch=('any')
  pkgdesc+=" (Documents)"
  provides=('julia-docs' 'julia-doc')
  conflicts=('julia-docs' 'julia-doc' 'julia-git-doc' 'julia-doc-git')
  replaces=('julia-git-doc' 'julia-doc-git')

  cd julia/doc/_build

  mkdir -p "$pkgdir"/usr/share/doc/julia/
  cp -dpr --no-preserve=ownership html "$pkgdir"/usr/share/doc/julia/
  find "$pkgdir/usr/share/doc/julia/" -type f -exec sed -i -e "s|$srcdir/julia||g" '{}' \+
}
