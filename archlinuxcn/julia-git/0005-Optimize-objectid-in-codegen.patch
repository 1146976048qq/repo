From 20a4bcb769f2a648fcdd3a62dc42935d6c4350a9 Mon Sep 17 00:00:00 2001
From: Yichao Yu <yyc1992@gmail.com>
Date: Fri, 21 Aug 2020 13:15:02 -0400
Subject: [PATCH 5/7] Optimize objectid in codegen

---
 src/builtins.c            | 53 +++++++++++++++++++++++++++++++++------
 src/ccall.cpp             | 43 ++++++++++++++++++++++++++++---
 src/codegen.cpp           | 28 ++++++++++++++++++---
 src/julia_internal.h      |  3 ++-
 src/llvm-alloc-opt.cpp    | 24 +++++++++++++++++-
 src/llvm-pass-helpers.cpp | 19 ++++++++++++++
 src/llvm-pass-helpers.h   |  3 +++
 7 files changed, 156 insertions(+), 17 deletions(-)

diff --git a/src/builtins.c b/src/builtins.c
index a0f28fb70c..1b0b966220 100644
--- a/src/builtins.c
+++ b/src/builtins.c
@@ -280,7 +280,7 @@ static uintptr_t type_object_id_(jl_value_t *v, jl_varidx_t *env) JL_NOTSAFEPOIN
         }
         return h;
     }
-    return jl_object_id_((jl_value_t*)tv, v);
+    return jl_object_id_(tv, v);
 }
 
 static uintptr_t immut_id_(jl_datatype_t *dt, jl_value_t *v, uintptr_t h) JL_NOTSAFEPOINT
@@ -321,13 +321,12 @@ static uintptr_t immut_id_(jl_datatype_t *dt, jl_value_t *v, uintptr_t h) JL_NOT
     return h;
 }
 
-JL_DLLEXPORT uintptr_t jl_object_id_(jl_value_t *tv, jl_value_t *v) JL_NOTSAFEPOINT
+JL_DLLEXPORT uintptr_t jl_object_id_(jl_datatype_t *dt, jl_value_t *v) JL_NOTSAFEPOINT
 {
-    if (tv == (jl_value_t*)jl_symbol_type)
+    if (dt == jl_symbol_type)
         return ((jl_sym_t*)v)->hash;
-    if (tv == (jl_value_t*)jl_simplevector_type)
+    if (dt == jl_simplevector_type)
         return hash_svec((jl_svec_t*)v);
-    jl_datatype_t *dt = (jl_datatype_t*)tv;
     if (dt == jl_datatype_type) {
         jl_datatype_t *dtv = (jl_datatype_t*)v;
         if (dtv->isconcretetype)
@@ -346,12 +345,52 @@ JL_DLLEXPORT uintptr_t jl_object_id_(jl_value_t *tv, jl_value_t *v) JL_NOTSAFEPO
     }
     if (dt->mutabl)
         return inthash((uintptr_t)v);
-    return immut_id_(dt, v, ((jl_datatype_t*)tv)->hash);
+    return immut_id_(dt, v, dt->hash);
 }
 
 JL_DLLEXPORT uintptr_t jl_object_id(jl_value_t *v) JL_NOTSAFEPOINT
 {
-    return jl_object_id_(jl_typeof(v), v);
+    return jl_object_id_((jl_datatype_t*)jl_typeof(v), v);
+}
+
+int jl_const_object_id(jl_value_t *v, uintptr_t *id) JL_NOTSAFEPOINT
+{
+    jl_datatype_t *dt = (jl_datatype_t*)jl_typeof(v);
+    if (dt == jl_symbol_type) {
+        *id = ((jl_sym_t*)v)->hash;
+        return 1;
+    }
+    if (dt == jl_simplevector_type) {
+        if (jl_svec_len(v)) {
+            *id = hash_svec((jl_svec_t*)v);
+            return 1;
+        }
+        return 0;
+    }
+    if (dt == jl_datatype_type) {
+        jl_datatype_t *dtv = (jl_datatype_t*)v;
+        if (dtv->isconcretetype) {
+            *id = dtv->hash;
+            return 1;
+        }
+        return 0;
+    }
+    if (dt == jl_typename_type) {
+        *id = ((jl_typename_t*)v)->hash;
+        return 1;
+    }
+    if (dt == jl_string_type) {
+#ifdef _P64
+        *id = memhash_seed(jl_string_data(v), jl_string_len(v), 0xedc3b677);
+#else
+        *id = memhash32_seed(jl_string_data(v), jl_string_len(v), 0xedc3b677);
+#endif
+        return 1;
+    }
+    if (dt->mutabl || dt->layout->npointers)
+        return 0;
+    *id = immut_id_(dt, v, dt->hash);
+    return 1;
 }
 
 // eq hash table --------------------------------------------------------------
diff --git a/src/ccall.cpp b/src/ccall.cpp
index e2600385b1..0cb2c4e1a2 100644
--- a/src/ccall.cpp
+++ b/src/ccall.cpp
@@ -1882,7 +1882,39 @@ static jl_cgval_t emit_ccall(jl_codectx_t &ctx, jl_value_t **args, size_t nargs)
     else if (is_libjulia_func(jl_object_id) && nccallargs == 1 &&
             rt == (jl_value_t*)jl_ulong_type) {
         jl_cgval_t val = argv[0];
-        if (!val.isboxed) {
+        jl_value_t *dt = jl_unwrap_unionall(val.typ);
+        Value *ret;
+        uintptr_t const_id;
+        if (val.constant && jl_const_object_id(val.constant, &const_id)) {
+            ret = ConstantInt::get(T_size, const_id);
+        }
+        else if (dt == (jl_value_t*)jl_symbol_type) {
+            auto ptr = emit_bitcast(ctx, decay_derived(ctx, boxed(ctx, val)), T_psize);
+            ptr = ctx.builder.CreateConstInBoundsGEP1_32(
+                T_size, ptr, offsetof(jl_sym_t, hash) / sizeof(uintptr_t));
+            ret = tbaa_decorate(tbaa_const, ctx.builder.CreateAlignedLoad(
+                                    T_size, ptr, Align(sizeof(void*))));
+        }
+        else if (dt == (jl_value_t*)jl_typename_type) {
+            auto ptr = emit_bitcast(ctx, decay_derived(ctx, boxed(ctx, val)), T_psize);
+            ptr = ctx.builder.CreateConstInBoundsGEP1_32(
+                T_size, ptr, offsetof(jl_typename_t, hash) / sizeof(uintptr_t));
+            ret = tbaa_decorate(tbaa_const, ctx.builder.CreateAlignedLoad(
+                                    T_size, ptr, Align(sizeof(void*))));
+        }
+        else if (jl_is_structtype(dt) &&
+                 dt != (jl_value_t*)jl_simplevector_type &&
+                 dt != (jl_value_t*)jl_datatype_type &&
+                 dt != (jl_value_t*)jl_string_type &&
+                 ((jl_datatype_t*)dt)->mutabl) {
+            // assert in case the branches above are removed.
+            assert(dt != (jl_value_t*)jl_symbol_type);
+            assert(dt != (jl_value_t*)jl_typename_type);
+            auto ptr = ctx.builder.CreatePtrToInt(emit_pointer_from_objref(ctx, boxed(ctx, val)),
+                                                  T_size);
+            ret = ctx.builder.CreateCall(prepare_call(inthash_func), ptr);
+        }
+        else if (!val.isboxed) {
             // If the value is not boxed, try to compute the object id without
             // reboxing it.
             auto T_pint8_derived = PointerType::get(T_int8, AddressSpace::Derived);
@@ -1895,10 +1927,13 @@ static jl_cgval_t emit_ccall(jl_codectx_t &ctx, jl_value_t **args, size_t nargs)
                         decay_derived(ctx, data_pointer(ctx, val)),
                         T_pint8_derived)
             };
-            Value *ret = ctx.builder.CreateCall(prepare_call(jl_object_id__func), makeArrayRef(args));
-            JL_GC_POP();
-            return mark_or_box_ccall_result(ctx, ret, retboxed, rt, unionall, static_rt);
+            ret = ctx.builder.CreateCall(prepare_call(jl_object_id__func), makeArrayRef(args));
+        }
+        else {
+            ret = ctx.builder.CreateCall(prepare_call(jl_object_id_func), boxed(ctx, val));
         }
+        JL_GC_POP();
+        return mark_or_box_ccall_result(ctx, ret, retboxed, rt, unionall, static_rt);
     }
 
     jl_cgval_t retval = sig.emit_a_ccall(
diff --git a/src/codegen.cpp b/src/codegen.cpp
index a81380b9e4..9d01a23bfd 100644
--- a/src/codegen.cpp
+++ b/src/codegen.cpp
@@ -376,12 +376,14 @@ static AttributeList get_attrs_zext(LLVMContext &C)
 
 // For libc functions that only read argument memory and not capturing them
 // e.g. memcmp, strlen, etc.
-static AttributeList get_attrs_rdonly(LLVMContext &C, ArrayRef<unsigned> ptrargs)
+static AttributeList get_attrs_rdonly(LLVMContext &C, ArrayRef<unsigned> ptrargs,
+                                      bool argonly=true)
 {
     auto attrs =  AttributeList::get(C,
-                Attributes(C, {Attribute::ReadOnly,
-                        Attribute::NoUnwind, Attribute::ArgMemOnly}),
+                Attributes(C, {Attribute::ReadOnly, Attribute::NoUnwind}),
                 AttributeSet(), None);
+    if (argonly)
+        attrs = attrs.addAttribute(C, AttributeList::FunctionIndex, Attribute::ArgMemOnly);
     for (auto arg: ptrargs)
         attrs = attrs.addParamAttribute(C, arg, Attribute::NoCapture);
     return attrs;
@@ -739,7 +741,25 @@ static const auto jl_object_id__func = new JuliaFunction{
     "jl_object_id_",
     [](LLVMContext &C) { return FunctionType::get(T_size,
             {T_prjlvalue, PointerType::get(T_int8, AddressSpace::Derived)}, false); },
-    nullptr,
+    [](LLVMContext &C) { return get_attrs_rdonly(C, {0, 1}, false); },
+};
+static const auto jl_object_id_func = new JuliaFunction{
+    "jl_object_id",
+    [](LLVMContext &C) { return FunctionType::get(T_size,
+            {T_prjlvalue}, false); },
+    [](LLVMContext &C) { return get_attrs_rdonly(C, {0}, false); },
+};
+static const auto inthash_func = new JuliaFunction{
+#ifdef _P64
+    "int64hash",
+#else
+    "int32hash",
+#endif
+    [](LLVMContext &C) { return FunctionType::get(T_size, {T_size}, false); },
+    [](LLVMContext &C) { return AttributeList::get(C,
+            Attributes(C, {Attribute::ReadNone, Attribute::NoUnwind, Attribute::NoRecurse}),
+            AttributeSet(),
+            None); },
 };
 static const auto setjmp_func = new JuliaFunction{
     jl_setjmp_name,
diff --git a/src/julia_internal.h b/src/julia_internal.h
index 79079504c9..d0e676e6d1 100644
--- a/src/julia_internal.h
+++ b/src/julia_internal.h
@@ -1102,8 +1102,9 @@ JL_DLLEXPORT int jl_stored_inline(jl_value_t *el_type);
 JL_DLLEXPORT jl_value_t *(jl_array_data_owner)(jl_array_t *a);
 JL_DLLEXPORT int jl_array_isassigned(jl_array_t *a, size_t i);
 
-JL_DLLEXPORT uintptr_t jl_object_id_(jl_value_t *tv, jl_value_t *v) JL_NOTSAFEPOINT;
+JL_DLLEXPORT uintptr_t jl_object_id_(jl_datatype_t *tv, jl_value_t *v) JL_NOTSAFEPOINT;
 JL_DLLEXPORT void jl_set_next_task(jl_task_t *task) JL_NOTSAFEPOINT;
+int jl_const_object_id(jl_value_t *v, uintptr_t *id) JL_NOTSAFEPOINT;
 
 // -- synchronization utilities -- //
 
diff --git a/src/llvm-alloc-opt.cpp b/src/llvm-alloc-opt.cpp
index 76691a8802..5d3f3606a0 100644
--- a/src/llvm-alloc-opt.cpp
+++ b/src/llvm-alloc-opt.cpp
@@ -118,6 +118,8 @@ struct AllocOpt : public FunctionPass, public JuliaPassContext {
 
     Function *lifetime_start;
     Function *lifetime_end;
+    Function *object_id_func;
+    Function *object_id__func;
 
     Type *T_int64;
 
@@ -621,7 +623,7 @@ void Optimizer::checkInst(Instruction *I)
                     return true;
                 }
             }
-            if (pass.pointer_from_objref_func == callee) {
+            if (pass.pointer_from_objref_func == callee || pass.object_id_func == callee) {
                 use_info.addrescaped = true;
                 return true;
             }
@@ -1020,6 +1022,17 @@ void Optimizer::moveToStack(CallInst *orig_inst, size_t sz, bool has_ref)
                 call->eraseFromParent();
                 return;
             }
+            if (pass.object_id_func == callee) {
+                IRBuilder<> builder(call);
+                builder.SetCurrentDebugLocation(call->getDebugLoc());
+                auto PT = PointerType::get(pass.T_int8, AddressSpace::Derived);
+                auto ptr = builder.CreatePointerCast(new_i, PT);
+                auto new_call = builder.CreateCall(pass.object_id__func, {tag, ptr});
+                new_call->takeName(call);
+                call->replaceAllUsesWith(new_call);
+                call->eraseFromParent();
+                return;
+            }
             if (pass.typeof_func == callee) {
                 call->replaceAllUsesWith(tag);
                 call->eraseFromParent();
@@ -1521,6 +1534,15 @@ bool AllocOpt::doInitialization(Module &M)
     if (!alloc_obj_func)
         return false;
 
+    object_id_func = M.getFunction("jl_object_id");
+    if (object_id_func) {
+        // We only need `jl_object_id_` if `jl_object_id` exists
+        object_id__func = getOrDeclare(jl_well_known::ObjectID_);
+    }
+    else {
+        object_id__func = nullptr;
+    }
+
     DL = &M.getDataLayout();
 
     T_int64 = Type::getInt64Ty(getLLVMContext());
diff --git a/src/llvm-pass-helpers.cpp b/src/llvm-pass-helpers.cpp
index d594408a20..d07488ad36 100644
--- a/src/llvm-pass-helpers.cpp
+++ b/src/llvm-pass-helpers.cpp
@@ -211,6 +211,7 @@ namespace jl_well_known {
     static const char *GC_BIG_ALLOC_NAME = "jl_gc_big_alloc";
     static const char *GC_POOL_ALLOC_NAME = "jl_gc_pool_alloc";
     static const char *GC_QUEUE_ROOT_NAME = "jl_gc_queue_root";
+    static const char *OBJECT_ID__NAME = "jl_object_id_";
 
     using jl_intrinsics::addGCAllocAttributes;
 
@@ -255,4 +256,22 @@ namespace jl_well_known {
             func->addFnAttr(Attribute::InaccessibleMemOrArgMemOnly);
             return func;
         });
+
+    const WellKnownFunctionDescription ObjectID_(
+        OBJECT_ID__NAME,
+        [](const JuliaPassContext &context) {
+            auto func = Function::Create(
+                FunctionType::get(
+                    context.T_size,
+                    {context.T_prjlvalue,
+                     PointerType::get(context.T_int8, AddressSpace::Derived)},
+                    false),
+                Function::ExternalLinkage,
+                OBJECT_ID__NAME);
+            func->addFnAttr(Attribute::ReadOnly);
+            func->addFnAttr(Attribute::NoUnwind);
+            func->addParamAttr(0, Attribute::NoCapture);
+            func->addParamAttr(1, Attribute::NoCapture);
+            return func;
+        });
 }
diff --git a/src/llvm-pass-helpers.h b/src/llvm-pass-helpers.h
index 71cab27e76..7fb8424611 100644
--- a/src/llvm-pass-helpers.h
+++ b/src/llvm-pass-helpers.h
@@ -152,6 +152,9 @@ namespace jl_well_known {
 
     // `jl_gc_queue_root`: queues a GC root.
     extern const WellKnownFunctionDescription GCQueueRoot;
+
+    // `jl_object_id_`: compute object id without boxing.
+    extern const WellKnownFunctionDescription ObjectID_;
 }
 
 #endif
-- 
2.28.0

