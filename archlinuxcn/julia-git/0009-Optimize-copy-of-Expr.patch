From afb743c72f70241ec2c209d8c76a8764dfadf99b Mon Sep 17 00:00:00 2001
From: Yichao Yu <yyc1992@gmail.com>
Date: Sun, 6 Sep 2020 22:12:36 -0400
Subject: [PATCH 9/9] Optimize copy of `Expr`

* Remove allocation of extra `[]`

* Remove all dynamic dispatch

* `@inbounds` array access
---
 base/expr.jl | 48 +++++++++++++++++++++++++-----------------------
 1 file changed, 25 insertions(+), 23 deletions(-)

diff --git a/base/expr.jl b/base/expr.jl
index 8bbb68f6d2..ff5e92005b 100644
--- a/base/expr.jl
+++ b/base/expr.jl
@@ -31,34 +31,36 @@ end
 
 ## expressions ##
 
-function copy(e::Expr)
-    n = Expr(e.head)
-    n.args = copy_exprargs(e.args)
-    return n
-end
+copy(e::Expr) = exprarray(e.head, copy_exprargs(e.args))
 
 # copy parts of an AST that the compiler mutates
-copy_exprs(@nospecialize(x)) = x
-copy_exprs(x::Expr) = copy(x)
-function copy_exprs(x::PhiNode)
-    new_values = Vector{Any}(undef, length(x.values))
-    for i = 1:length(x.values)
-        isassigned(x.values, i) || continue
-        new_values[i] = copy_exprs(x.values[i])
-    end
-    return PhiNode(copy(x.edges), new_values)
-end
-function copy_exprs(x::PhiCNode)
-    new_values = Vector{Any}(undef, length(x.values))
-    for i = 1:length(x.values)
-        isassigned(x.values, i) || continue
-        new_values[i] = copy_exprs(x.values[i])
+function copy_exprs(@nospecialize(x))
+    if isa(x, Expr)
+        return copy(x)
+    elseif isa(x, PhiNode)
+        values = x.values
+        nvalues = length(values)
+        new_values = Vector{Any}(undef, nvalues)
+        @inbounds for i = 1:nvalues
+            isassigned(values, i) || continue
+            new_values[i] = copy_exprs(values[i])
+        end
+        return PhiNode(copy(x.edges), new_values)
+    elseif isa(x, PhiCNode)
+        values = x.values
+        nvalues = length(values)
+        new_values = Vector{Any}(undef, nvalues)
+        @inbounds for i = 1:nvalues
+            isassigned(values, i) || continue
+            new_values[i] = copy_exprs(values[i])
+        end
+        return PhiCNode(new_values)
     end
-    return PhiCNode(new_values)
+    return x
 end
-copy_exprargs(x::Array{Any,1}) = Any[copy_exprs(x[i]) for i in 1:length(x)]
+copy_exprargs(x::Array{Any,1}) = Any[copy_exprs(@inbounds x[i]) for i in 1:length(x)]
 
-exprarray(head, args::Array{Any,1}) = (ex = Expr(head); ex.args = args; ex)
+@eval exprarray(head::Symbol, arg::Array{Any,1}) = $(Expr(:new, :Expr, :head, :arg))
 
 # create copies of the CodeInfo definition, and any mutable fields
 function copy(c::CodeInfo)
-- 
2.28.0

