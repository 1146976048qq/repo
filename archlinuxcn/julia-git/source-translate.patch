diff --git a/base/sysimg.jl b/base/sysimg.jl
index 6cb6b1249f..26ab70cc90 100644
--- a/base/sysimg.jl
+++ b/base/sysimg.jl
@@ -63,9 +63,18 @@ let
             tt = @elapsed Base.require(Base, stdlib)
             print_time(stdlib, tt)
         end
+        makepkg_srcdir = get(ENV, "JL_MAKEPKG_SRCDIR", "")
         for dep in Base._require_dependencies
             dep[3] == 0.0 && continue
-            push!(Base._included_files, dep[1:2])
+            if isempty(makepkg_srcdir)
+                push!(Base._included_files, dep[1:2])
+            else
+                if startswith(dep[2], makepkg_srcdir * "/")
+                    push!(Base._included_files, (dep[1], dep[2][length(makepkg_srcdir) + 1:end]))
+                else
+                    push!(Base._included_files, dep[1:2])
+                end
+            end
         end
         empty!(Base._require_dependencies)
         Base._track_dependencies[] = false
diff --git a/etc/write_base_cache.jl b/etc/write_base_cache.jl
index a81908b96a..4c463db143 100644
--- a/etc/write_base_cache.jl
+++ b/etc/write_base_cache.jl
@@ -2,7 +2,11 @@
 cachefile = ARGS[1]
 open(cachefile, "w") do io
     for (_, filename) in Base._included_files
-        src = read(filename, String)
+        if isfile(get(ENV, "JL_MAKEPKG_SRCDIR", "") * "/" * filename)
+            src = read(get(ENV, "JL_MAKEPKG_SRCDIR", "") * "/" * filename, String)
+        elseif isfile(filename)
+            src = read(filename, String)
+        end
         write(io, Int32(sizeof(filename)))
         write(io, filename)
         write(io, UInt64(sizeof(src)))
diff --git a/src/ast.c b/src/ast.c
index 3b4b3e5d78..2fd126d366 100644
--- a/src/ast.c
+++ b/src/ast.c
@@ -782,6 +782,8 @@ static value_t julia_to_scm_(fl_context_t *fl_ctx, jl_value_t *v)
     return julia_to_scm_noalloc2(fl_ctx, v);
 }
 
+JL_DLLEXPORT __attribute__((weak)) const char *jl_archlinux_translate_filename(const char *filename);
+
 // Parse `text` starting at 0-based `offset` and attributing the content to
 // `filename`. Return an svec of (parsed_expr, final_offset)
 JL_DLLEXPORT jl_value_t *jl_fl_parse(const char *text, size_t text_len,
@@ -806,8 +808,10 @@ JL_DLLEXPORT jl_value_t *jl_fl_parse(const char *text, size_t text_len,
     fl_context_t *fl_ctx = &ctx->fl;
     value_t fl_text = cvalue_static_cstrn(fl_ctx, text, text_len);
     fl_gc_handle(fl_ctx, &fl_text);
-    value_t fl_filename = cvalue_static_cstrn(fl_ctx, jl_string_data(filename),
-                                              jl_string_len(filename));
+    const char *_filename = jl_string_data(filename);
+    if (jl_archlinux_translate_filename)
+        _filename = jl_archlinux_translate_filename(_filename);
+    value_t fl_filename = cvalue_static_cstrn(fl_ctx, _filename, strlen(_filename));
     fl_gc_handle(fl_ctx, &fl_filename);
     value_t fl_expr;
     size_t offset1 = 0;
