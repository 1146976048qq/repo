From 041a98a033846d63d3143c1cfa800ab672500f4a Mon Sep 17 00:00:00 2001
From: Yichao Yu <yyc1992@gmail.com>
Date: Tue, 20 Jun 2017 16:58:01 +0800
Subject: [PATCH] Use 64bit jump table with large code model on 64bit

The data and code segments can be more than 32bit apart.
---
 include/llvm/CodeGen/MIRYamlMapping.h       |  2 ++
 include/llvm/CodeGen/MachineJumpTableInfo.h |  9 +++++
 lib/CodeGen/AsmPrinter/AsmPrinter.cpp       | 12 ++++---
 lib/CodeGen/MachineFunction.cpp             |  2 ++
 lib/CodeGen/SelectionDAG/TargetLowering.cpp | 20 ++++++++---
 lib/Target/PowerPC/PPCISelLowering.cpp      |  6 +++-
 test/CodeGen/AArch64/jumptable-large.ll     | 51 +++++++++++++++++++++++++++++
 test/CodeGen/PowerPC/jumptable-large.ll     | 51 +++++++++++++++++++++++++++++
 test/CodeGen/X86/jumptable-large.ll         | 51 +++++++++++++++++++++++++++++
 9 files changed, 194 insertions(+), 10 deletions(-)
 create mode 100644 test/CodeGen/AArch64/jumptable-large.ll
 create mode 100644 test/CodeGen/PowerPC/jumptable-large.ll
 create mode 100644 test/CodeGen/X86/jumptable-large.ll

diff --git a/include/llvm/CodeGen/MIRYamlMapping.h b/include/llvm/CodeGen/MIRYamlMapping.h
index 778f72c06e6..cb3e6205d7b 100644
--- a/include/llvm/CodeGen/MIRYamlMapping.h
+++ b/include/llvm/CodeGen/MIRYamlMapping.h
@@ -126,6 +126,8 @@ template <> struct ScalarEnumerationTraits<MachineJumpTableInfo::JTEntryKind> {
                 MachineJumpTableInfo::EK_GPRel32BlockAddress);
     IO.enumCase(EntryKind, "label-difference32",
                 MachineJumpTableInfo::EK_LabelDifference32);
+    IO.enumCase(EntryKind, "label-difference64",
+                MachineJumpTableInfo::EK_LabelDifference64);
     IO.enumCase(EntryKind, "inline", MachineJumpTableInfo::EK_Inline);
     IO.enumCase(EntryKind, "custom32", MachineJumpTableInfo::EK_Custom32);
   }
diff --git a/include/llvm/CodeGen/MachineJumpTableInfo.h b/include/llvm/CodeGen/MachineJumpTableInfo.h
index adcd1d0de63..1c146f890bb 100644
--- a/include/llvm/CodeGen/MachineJumpTableInfo.h
+++ b/include/llvm/CodeGen/MachineJumpTableInfo.h
@@ -67,6 +67,15 @@ public:
     ///      .word L4_5_set_123
     EK_LabelDifference32,
 
+    /// EK_LabelDifference64 - Each entry is the address of the block minus
+    /// the address of the jump table.  This is used for PIC jump tables where
+    /// gprel64 is not supported.  e.g.:
+    ///      .word LBB123 - LJTI1_2
+    /// If the .set directive is supported, this is emitted as:
+    ///      .set L4_5_set_123, LBB123 - LJTI1_2
+    ///      .word L4_5_set_123
+    EK_LabelDifference64,
+
     /// EK_Inline - Jump table entries are emitted inline at their point of
     /// use. It is the responsibility of the target to emit the entries.
     EK_Inline,
diff --git a/lib/CodeGen/AsmPrinter/AsmPrinter.cpp b/lib/CodeGen/AsmPrinter/AsmPrinter.cpp
index 24fdbfc901f..e2675e88885 100644
--- a/lib/CodeGen/AsmPrinter/AsmPrinter.cpp
+++ b/lib/CodeGen/AsmPrinter/AsmPrinter.cpp
@@ -1423,7 +1423,8 @@ void AsmPrinter::EmitJumpTableInfo() {
   const Function *F = MF->getFunction();
   const TargetLoweringObjectFile &TLOF = getObjFileLowering();
   bool JTInDiffSection = !TLOF.shouldPutJumpTableInFunctionSection(
-      MJTI->getEntryKind() == MachineJumpTableInfo::EK_LabelDifference32,
+      MJTI->getEntryKind() == MachineJumpTableInfo::EK_LabelDifference32 ||
+      MJTI->getEntryKind() == MachineJumpTableInfo::EK_LabelDifference64,
       *F);
   if (JTInDiffSection) {
     // Drop it in the readonly section.
@@ -1444,9 +1445,10 @@ void AsmPrinter::EmitJumpTableInfo() {
     // If this jump table was deleted, ignore it.
     if (JTBBs.empty()) continue;
 
-    // For the EK_LabelDifference32 entry, if using .set avoids a relocation,
+    // For the EK_LabelDifference(32|64) entry, if using .set avoids a relocation,
     /// emit a .set directive for each unique entry.
-    if (MJTI->getEntryKind() == MachineJumpTableInfo::EK_LabelDifference32 &&
+    if ((MJTI->getEntryKind() == MachineJumpTableInfo::EK_LabelDifference32 ||
+         MJTI->getEntryKind() == MachineJumpTableInfo::EK_LabelDifference64) &&
         MAI->doesSetDirectiveSuppressReloc()) {
       SmallPtrSet<const MachineBasicBlock*, 16> EmittedSets;
       const TargetLowering *TLI = MF->getSubtarget().getTargetLowering();
@@ -1520,9 +1522,11 @@ void AsmPrinter::EmitJumpTableEntry(const MachineJumpTableInfo *MJTI,
     return;
   }
 
+
+  case MachineJumpTableInfo::EK_LabelDifference64:
   case MachineJumpTableInfo::EK_LabelDifference32: {
     // Each entry is the address of the block minus the address of the jump
-    // table. This is used for PIC jump tables where gprel32 is not supported.
+    // table. This is used for PIC jump tables where gprel32 or gprel64 is not supported.
     // e.g.:
     //      .word LBB123 - LJTI1_2
     // If the .set directive avoids relocations, this is emitted as:
diff --git a/lib/CodeGen/MachineFunction.cpp b/lib/CodeGen/MachineFunction.cpp
index c1d5ea96cd1..6bef96759b6 100644
--- a/lib/CodeGen/MachineFunction.cpp
+++ b/lib/CodeGen/MachineFunction.cpp
@@ -973,6 +973,7 @@ unsigned MachineJumpTableInfo::getEntrySize(const DataLayout &TD) const {
   case MachineJumpTableInfo::EK_BlockAddress:
     return TD.getPointerSize();
   case MachineJumpTableInfo::EK_GPRel64BlockAddress:
+  case MachineJumpTableInfo::EK_LabelDifference64:
     return 8;
   case MachineJumpTableInfo::EK_GPRel32BlockAddress:
   case MachineJumpTableInfo::EK_LabelDifference32:
@@ -993,6 +994,7 @@ unsigned MachineJumpTableInfo::getEntryAlignment(const DataLayout &TD) const {
   case MachineJumpTableInfo::EK_BlockAddress:
     return TD.getPointerABIAlignment();
   case MachineJumpTableInfo::EK_GPRel64BlockAddress:
+  case MachineJumpTableInfo::EK_LabelDifference64:
     return TD.getABIIntegerTypeAlignment(64);
   case MachineJumpTableInfo::EK_GPRel32BlockAddress:
   case MachineJumpTableInfo::EK_LabelDifference32:
diff --git a/lib/CodeGen/SelectionDAG/TargetLowering.cpp b/lib/CodeGen/SelectionDAG/TargetLowering.cpp
index 9906e9ed11d..4f4232424b2 100644
--- a/lib/CodeGen/SelectionDAG/TargetLowering.cpp
+++ b/lib/CodeGen/SelectionDAG/TargetLowering.cpp
@@ -286,12 +286,22 @@ unsigned TargetLowering::getJumpTableEncoding() const {
   if (!isPositionIndependent())
     return MachineJumpTableInfo::EK_BlockAddress;
 
-  // In PIC mode, if the target supports a GPRel32 directive, use it.
-  if (getTargetMachine().getMCAsmInfo()->getGPRel32Directive() != nullptr)
-    return MachineJumpTableInfo::EK_GPRel32BlockAddress;
+  const auto &TM = getTargetMachine();
+  if (TM.getPointerSize() == 8 && TM.getCodeModel() == CodeModel::Large) {
+    // In PIC mode, if the target supports a GPRel64 directive, use it.
+    if (TM.getMCAsmInfo()->getGPRel64Directive() != nullptr)
+      return MachineJumpTableInfo::EK_GPRel64BlockAddress;
+
+    // Otherwise, use a label difference.
+    return MachineJumpTableInfo::EK_LabelDifference64;
+  } else {
+    // In PIC mode, if the target supports a GPRel32 directive, use it.
+    if (TM.getMCAsmInfo()->getGPRel32Directive() != nullptr)
+      return MachineJumpTableInfo::EK_GPRel32BlockAddress;
 
-  // Otherwise, use a label difference.
-  return MachineJumpTableInfo::EK_LabelDifference32;
+    // Otherwise, use a label difference.
+    return MachineJumpTableInfo::EK_LabelDifference32;
+  }
 }
 
 SDValue TargetLowering::getPICJumpTableRelocBase(SDValue Table,
diff --git a/lib/Target/PowerPC/PPCISelLowering.cpp b/lib/Target/PowerPC/PPCISelLowering.cpp
index 631308259f9..7a8c7314a2b 100644
--- a/lib/Target/PowerPC/PPCISelLowering.cpp
+++ b/lib/Target/PowerPC/PPCISelLowering.cpp
@@ -2181,8 +2181,12 @@ SDValue PPCTargetLowering::LowerConstantPool(SDValue Op,
 // This trades 32 bits per jump table entry for one or two instructions
 // on the jump site.
 unsigned PPCTargetLowering::getJumpTableEncoding() const {
-  if (isJumpTableRelative())
+  if (isJumpTableRelative()) {
+    if (Subtarget.isPPC64() && getTargetMachine().getCodeModel() == CodeModel::Large) {
+      return MachineJumpTableInfo::EK_LabelDifference64;
+    }
     return MachineJumpTableInfo::EK_LabelDifference32;
+  }
 
   return TargetLowering::getJumpTableEncoding();
 }
diff --git a/test/CodeGen/AArch64/jumptable-large.ll b/test/CodeGen/AArch64/jumptable-large.ll
new file mode 100644
index 00000000000..887f3e6264b
--- /dev/null
+++ b/test/CodeGen/AArch64/jumptable-large.ll
@@ -0,0 +1,51 @@
+; RUN: llc -O0 -relocation-model=pic -code-model=small -march=aarch64 %s -o - | FileCheck --check-prefix=CHECK --check-prefix=CHECK-SMALL %s
+; RUN: llc -O0 -relocation-model=pic -code-model=large -march=aarch64 %s -o - | FileCheck --check-prefix=CHECK --check-prefix=CHECK-LARGE %s
+
+define double @f(i64) {
+top:
+  switch i64 %0, label %L19 [
+    i64 0, label %if
+    i64 1, label %if1
+    i64 2, label %if2
+    i64 3, label %if3
+  ]
+
+if:                                               ; preds = %top
+  %1 = call double @g1(double -1.000000e+00)
+  ret double %1
+
+if1:                                              ; preds = %top
+  %2 = call double @g2(double 1.000000e+00)
+  ret double %2
+
+if2:                                              ; preds = %top
+  %3 = call double @g3(double 1.000000e+00)
+  ret double %3
+
+if3:                                              ; preds = %top
+  %4 = call double @g4(double 1.000000e+00)
+  ret double %4
+
+L19:                                              ; preds = %top
+  %5 = call double @g5(double 1.000000e+00)
+  ret double %5
+; CHECK-LABEL: .LJTI0_0:
+; CHECK-LARGE-NEXT: .xword .LBB{{.*}}-.LJTI0_0
+; CHECK-LARGE-NEXT: .xword .LBB{{.*}}-.LJTI0_0
+; CHECK-LARGE-NEXT: .xword .LBB{{.*}}-.LJTI0_0
+; CHECK-LARGE-NEXT: .xword .LBB{{.*}}-.LJTI0_0
+; CHECK-SMALL-NEXT: .word .LBB{{.*}}-.LJTI0_0
+; CHECK-SMALL-NEXT: .word .LBB{{.*}}-.LJTI0_0
+; CHECK-SMALL-NEXT: .word .LBB{{.*}}-.LJTI0_0
+; CHECK-SMALL-NEXT: .word .LBB{{.*}}-.LJTI0_0
+}
+
+declare double @g1(double)
+
+declare double @g2(double)
+
+declare double @g3(double)
+
+declare double @g4(double)
+
+declare double @g5(double)
diff --git a/test/CodeGen/PowerPC/jumptable-large.ll b/test/CodeGen/PowerPC/jumptable-large.ll
new file mode 100644
index 00000000000..94d1c172a9c
--- /dev/null
+++ b/test/CodeGen/PowerPC/jumptable-large.ll
@@ -0,0 +1,51 @@
+; RUN: llc -O0 -relocation-model=pic -code-model=small -march=ppc64 %s -o - | FileCheck --check-prefix=CHECK --check-prefix=CHECK-SMALL %s
+; RUN: llc -O0 -relocation-model=pic -code-model=large -march=ppc64 %s -o - | FileCheck --check-prefix=CHECK --check-prefix=CHECK-LARGE %s
+
+define double @f(i64) {
+top:
+  switch i64 %0, label %L19 [
+    i64 0, label %if
+    i64 1, label %if1
+    i64 2, label %if2
+    i64 3, label %if3
+  ]
+
+if:                                               ; preds = %top
+  %1 = call double @g1(double -1.000000e+00)
+  ret double %1
+
+if1:                                              ; preds = %top
+  %2 = call double @g2(double 1.000000e+00)
+  ret double %2
+
+if2:                                              ; preds = %top
+  %3 = call double @g3(double 1.000000e+00)
+  ret double %3
+
+if3:                                              ; preds = %top
+  %4 = call double @g4(double 1.000000e+00)
+  ret double %4
+
+L19:                                              ; preds = %top
+  %5 = call double @g5(double 1.000000e+00)
+  ret double %5
+; CHECK-LABEL: .LJTI0_0:
+; CHECK-LARGE-NEXT: .quad .LBB{{.*}}-.L0$pb
+; CHECK-LARGE-NEXT: .quad .LBB{{.*}}-.L0$pb
+; CHECK-LARGE-NEXT: .quad .LBB{{.*}}-.L0$pb
+; CHECK-LARGE-NEXT: .quad .LBB{{.*}}-.L0$pb
+; CHECK-SMALL-NEXT: .long .LBB{{.*}}-.LJTI0_0
+; CHECK-SMALL-NEXT: .long .LBB{{.*}}-.LJTI0_0
+; CHECK-SMALL-NEXT: .long .LBB{{.*}}-.LJTI0_0
+; CHECK-SMALL-NEXT: .long .LBB{{.*}}-.LJTI0_0
+}
+
+declare double @g1(double)
+
+declare double @g2(double)
+
+declare double @g3(double)
+
+declare double @g4(double)
+
+declare double @g5(double)
diff --git a/test/CodeGen/X86/jumptable-large.ll b/test/CodeGen/X86/jumptable-large.ll
new file mode 100644
index 00000000000..64da1dc0e40
--- /dev/null
+++ b/test/CodeGen/X86/jumptable-large.ll
@@ -0,0 +1,51 @@
+; RUN: llc -O0 -relocation-model=pic -code-model=small -march=x86-64 %s -o - | FileCheck --check-prefix=CHECK --check-prefix=CHECK-SMALL %s
+; RUN: llc -O0 -relocation-model=pic -code-model=large -march=x86-64 %s -o - | FileCheck --check-prefix=CHECK --check-prefix=CHECK-LARGE %s
+
+define double @f(i64) {
+top:
+  switch i64 %0, label %L19 [
+    i64 0, label %if
+    i64 1, label %if1
+    i64 2, label %if2
+    i64 3, label %if3
+  ]
+
+if:                                               ; preds = %top
+  %1 = call double @g1(double -1.000000e+00)
+  ret double %1
+
+if1:                                              ; preds = %top
+  %2 = call double @g2(double 1.000000e+00)
+  ret double %2
+
+if2:                                              ; preds = %top
+  %3 = call double @g3(double 1.000000e+00)
+  ret double %3
+
+if3:                                              ; preds = %top
+  %4 = call double @g4(double 1.000000e+00)
+  ret double %4
+
+L19:                                              ; preds = %top
+  %5 = call double @g5(double 1.000000e+00)
+  ret double %5
+; CHECK-LABEL: .LJTI0_0:
+; CHECK-LARGE-NEXT: .quad .LBB{{.*}}-.LJTI0_0
+; CHECK-LARGE-NEXT: .quad .LBB{{.*}}-.LJTI0_0
+; CHECK-LARGE-NEXT: .quad .LBB{{.*}}-.LJTI0_0
+; CHECK-LARGE-NEXT: .quad .LBB{{.*}}-.LJTI0_0
+; CHECK-SMALL-NEXT: .long .LBB{{.*}}-.LJTI0_0
+; CHECK-SMALL-NEXT: .long .LBB{{.*}}-.LJTI0_0
+; CHECK-SMALL-NEXT: .long .LBB{{.*}}-.LJTI0_0
+; CHECK-SMALL-NEXT: .long .LBB{{.*}}-.LJTI0_0
+}
+
+declare double @g1(double)
+
+declare double @g2(double)
+
+declare double @g3(double)
+
+declare double @g4(double)
+
+declare double @g5(double)
-- 
2.13.1

