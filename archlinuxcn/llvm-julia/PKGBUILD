# Maintainer: Evangelos Foutras <evangelos@foutrelis.com>
# Contributor: Jan "heftig" Steffens <jan.steffens@gmail.com>

pkgname=(llvm-julia llvm-libs-julia llvm-ocaml-julia)
pkgver=10.0.1
pkgrel=6
arch=(i686 x86_64 armv7h aarch64)
url="https://llvm.org/"
license=('custom:Apache 2.0 with LLVM Exception')
makedepends=(cmake ninja libffi libedit ncurses libxml2 ocaml ocaml-ctypes ocaml-findlib
             python-sphinx python-recommonmark)
options=('staticlibs' '!strip')
_source_base=https://github.com/llvm/llvm-project/releases/download/llvmorg-$pkgver
source=($_source_base/llvm-$pkgver.src.tar.xz
        llvm-D27629-AArch64-large_model.patch
        llvm-D34078-vectorize-fdiv.patch
        llvm-7.0-D44650.patch
        llvm9-D50010-VNCoercion-ni.patch
        llvm-exegesis-mingw.patch
        llvm-test-plugin-mingw.patch
        llvm7-revert-D44485.patch
        llvm-D75072-SCEV-add-type.patch
        llvm-10.0-PPC_SELECT_CC.patch # LLVM 11
        llvm-10.0-PPC-LI-Elimination.patch # LLVM 11
        0001-Support-PC-relative-relocation-on-AArch64-and-PPC64-.patch # LLVM 12?
        clear-gep.patch # LLVM 12?
        stack-color.patch # LLVM 12
        0001-Do-not-strip-metadata-from-load-of-constant-memory.patch
        0001-Backportable-version-of-D86837.patch
        llvm-config.h)
sha256sums=('c5d8e30b57cbded7128d78e5e8dad811bff97a8d471896812f57fa99ee82cdf3'
            '9f4851adbd9353c4d362ea604d07bcf8c565e1b06ea312986f5ad98d69853ae3'
            '0218121facb405a70f85b3b09a13d9d335d568da8fdd97740ff62bdd07c357a7'
            '390ec9982d778383566fc87e56acd94027c99670d19434b5914ec738eb9ca5c0'
            'bd55ecb3e743e43d7154380e4d0d66bbf8f74df9ac7866cfeb9be0a8a51e2de8'
            '778fb63f1025de7d4c7ecc4647026d9781971c3e9975817b703bab238364015e'
            'd2bee469b78630a513ae543a9b619aa686db2188a7c68086356e4165191ae78b'
            '1629672afa288b89c09559ecd3c18b8606603f89ebfaa9ebd2fcd671079ea938'
            '1fdc23b8e530d75829389997c31a28ad4522948d4c5744dc1e4354cdbd1b2a09'
            '40e5b55f6b6074fad2c454819256248f97c21c12d85b22dab3c47b2883bbc8d5'
            '8412ba6775765c6af3d49cb482a698d7b78e21ed85d9e978393ff2d8694b8481'
            'e62c60d8c223a788cdbe633bbc1505bda60a56189ec085d4251be0ac94b332a7'
            '84a312c921de24f9d3736f9ad31a5c3af4461708a5ea2a1d62e6b9b62d4e26b4'
            '72e0870b215a13d498a5f6b7ddc64d45a48464bed4b2eef1b62fae5b5fe54dbf'
            '20bd582f4eb78a5a7a1e1ec04beeefd9ef2b193f340ef744c4a4f5ec0deddaed'
            'acfafd123eec92242c0412358b1d08ca20ade97c5e0195c68d050d1fd7a8f265'
            '597dc5968c695bbdbb0eac9e8eb5117fcd2773bc91edf5ec103ecffffab8bc48')

_FLTO=''

# _FLTO='-flto'
# if [[ "${CARCH}" == "aarch64" ]] || [[ "${CARCH}" == "armv7h" ]]; then
#     # GCC miscompiles LLVM on AArch64 with LTO and segfault on arm during linking...
#     _FLTO=''
# fi

apply_julia_patch() {
  local name=$1
  msg "Applying Julia patch $name"
  patch -p1 < ../$name.patch
}

prepare() {
  rm -rf bin/
  mkdir -p bin/

  for p in cc c++ gcc g++; do
    cat > bin/$p <<EOF
#!/bin/bash
exec /usr/bin/$p $_FLTO "\${@}"
EOF
    chmod +x bin/$p
  done

  cd "$srcdir/llvm-$pkgver.src"
  mkdir build

  apply_julia_patch llvm-D27629-AArch64-large_model
  apply_julia_patch llvm-D34078-vectorize-fdiv
  apply_julia_patch llvm-7.0-D44650
  apply_julia_patch llvm9-D50010-VNCoercion-ni
  apply_julia_patch llvm-exegesis-mingw
  apply_julia_patch llvm-test-plugin-mingw
  apply_julia_patch llvm7-revert-D44485
  apply_julia_patch llvm-D75072-SCEV-add-type
  apply_julia_patch llvm-10.0-PPC_SELECT_CC
  apply_julia_patch llvm-10.0-PPC-LI-Elimination
  apply_julia_patch 0001-Support-PC-relative-relocation-on-AArch64-and-PPC64-
  apply_julia_patch clear-gep
  apply_julia_patch stack-color
  apply_julia_patch 0001-Do-not-strip-metadata-from-load-of-constant-memory
  apply_julia_patch 0001-Backportable-version-of-D86837.patch

  # Arch patches
  # msg "Applying Arch patches"
}

build() {
  cd llvm-$pkgver.src/build

  export PATH="${srcdir}/bin:${PATH}"
  CFLAGS+=" -ffile-prefix-map=${srcdir}=${DBGSRCDIR:-/usr/src/debug}"
  CXXFLAGS+=" -ffile-prefix-map=${srcdir}=${DBGSRCDIR:-/usr/src/debug}"
  CFLAGS+=' -ggdb1 -O3 -fasynchronous-unwind-tables'
  CXXFLAGS+=' -ggdb1 -O3 -fasynchronous-unwind-tables'
  LDFLAGS+=' -O3 -fasynchronous-unwind-tables'

  cmake .. -G Ninja \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=/usr \
        -DLLVM_HOST_TRIPLE=$CHOST \
        -DLLVM_BUILD_LLVM_DYLIB=ON \
        -DLLVM_LINK_LLVM_DYLIB=ON \
        -DLLVM_INSTALL_UTILS=ON \
        -DLLVM_ENABLE_RTTI=ON \
        -DLLVM_ENABLE_FFI=ON \
        -DLLVM_EXPERIMENTAL_TARGETS_TO_BUILD=AVR \
        -DLLVM_BUILD_TESTS=ON \
        -DLLVM_BUILD_DOCS=ON \
        -DLLVM_ENABLE_SPHINX=ON \
        -DLLVM_ENABLE_DOXYGEN=OFF \
        -DSPHINX_WARNINGS_AS_ERRORS=OFF \
        -DLLVM_BINUTILS_INCDIR=/usr/include
  ninja all ocaml_doc
}

package_llvm-julia() {
  pkgdesc="Collection of modular and reusable compiler and toolchain technologies (with patch for julia)"
  depends=("llvm-libs-julia=$pkgver-$pkgrel" perl)
  optdepends=('python-setuptools: for using lit (LLVM Integrated Tester)')
  conflicts=(llvm)
  provides=("llvm=$pkgver-$pkgrel")

  cd llvm-$pkgver.src/build

  DESTDIR="$pkgdir" ninja install

  # Include lit for running lit-based tests in other projects
  pushd ../utils/lit
  python3 setup.py install --root="$pkgdir" -O1
  popd

  # Remove documentation sources
  rm -r "$pkgdir"/usr/share/doc/llvm/html/{_sources,.buildinfo}

  # The runtime libraries go into llvm-libs
  mv -f "$pkgdir"/usr/lib/lib{LLVM,LTO,Remarks}*.so* "$srcdir"
  mv -f "$pkgdir"/usr/lib/LLVMgold.so "$srcdir"

  # OCaml bindings go to a separate package
  rm -rf "$srcdir"/ocaml.{lib,doc}
  mv "$pkgdir/usr/lib/ocaml" "$srcdir/ocaml.lib"
  mv "$pkgdir/usr/share/doc/llvm/ocaml-html" "$srcdir/ocaml.doc"

  if [[ $CARCH == x86_64 ]]; then
    # Needed for multilib (https://bugs.archlinux.org/task/29951)
    # Header stub is taken from Fedora
    mv "$pkgdir/usr/include/llvm/Config/llvm-config"{,-64}.h
    cp "$srcdir/llvm-config.h" "$pkgdir/usr/include/llvm/Config/llvm-config.h"
  fi

  install -Dm644 ../LICENSE.TXT "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
}

package_llvm-libs-julia() {
  pkgdesc="LLVM runtime libraries (with patch for julia)"
  depends=(gcc-libs zlib libffi libedit ncurses libxml2)
  conflicts=("llvm-libs")
  provides=("llvm-libs=$pkgver-$pkgrel")

  install -d "$pkgdir/usr/lib"
  cp -P \
     "$srcdir"/lib{LLVM,LTO,Remarks}*.so* \
     "$srcdir"/LLVMgold.so \
     "$pkgdir/usr/lib/"

  # Symlink LLVMgold.so from /usr/lib/bfd-plugins
  # https://bugs.archlinux.org/task/28479
  install -d "$pkgdir/usr/lib/bfd-plugins"
  ln -s ../LLVMgold.so "$pkgdir/usr/lib/bfd-plugins/LLVMgold.so"

  install -Dm644 "$srcdir/llvm-$pkgver.src/LICENSE.TXT" \
          "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
}

package_llvm-ocaml-julia() {
  _ocaml_ver=$(ocamlc --version)

  pkgdesc="OCaml bindings for LLVM (with patch for julia)"
  depends=("llvm-julia=$pkgver-$pkgrel" "ocaml=$_ocaml_ver" ocaml-ctypes)
  conflicts=("llvm-ocaml")
  provides=("llvm-ocaml=$pkgver-$pkgrel")

  install -d "$pkgdir"/{usr/lib,usr/share/doc/llvm-ocaml}
  cp -a "$srcdir/ocaml.lib" "$pkgdir/usr/lib/ocaml"
  cp -a "$srcdir/ocaml.doc" "$pkgdir/usr/share/doc/llvm-ocaml/html"

  install -Dm644 "$srcdir/llvm-$pkgver.src/LICENSE.TXT" \
          "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
}
