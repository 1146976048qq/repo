--- fceux-2.2.3/SConstruct.orig	2019-07-26 18:04:29.368573309 +0000
+++ fceux-2.2.3/SConstruct	2019-07-26 18:04:31.975265342 +0000
@@ -47,30 +47,30 @@ if platform.system == "ppc":
 env.Append(CCFLAGS = ['-Wall', '-Wno-write-strings', '-Wno-sign-compare'])
 env.Append(CXXFLAGS = ['-std=c++0x'])

-if os.environ.has_key('PLATFORM'):
+if os.environ.get('PLATFORM'):
   env.Replace(PLATFORM = os.environ['PLATFORM'])
-if os.environ.has_key('CC'):
+if os.environ.get('CC'):
   env.Replace(CC = os.environ['CC'])
-if os.environ.has_key('CXX'):
+if os.environ.get('CXX'):
   env.Replace(CXX = os.environ['CXX'])
-if os.environ.has_key('WINDRES'):
+if os.environ.get('WINDRES'):
   env.Replace(WINDRES = os.environ['WINDRES'])
-if os.environ.has_key('CFLAGS'):
+if os.environ.get('CFLAGS'):
   env.Append(CCFLAGS = os.environ['CFLAGS'].split())
-if os.environ.has_key('CXXFLAGS'):
+if os.environ.get('CXXFLAGS'):
   env.Append(CXXFLAGS = os.environ['CXXFLAGS'].split())
-if os.environ.has_key('CPPFLAGS'):
+if os.environ.get('CPPFLAGS'):
   env.Append(CPPFLAGS = os.environ['CPPFLAGS'].split())
-if os.environ.has_key('LDFLAGS'):
+if os.environ.get('LDFLAGS'):
   env.Append(LINKFLAGS = os.environ['LDFLAGS'].split())
-if os.environ.has_key('PKG_CONFIG_PATH'):
+if os.environ.get('PKG_CONFIG_PATH'):
   env['ENV']['PKG_CONFIG_PATH'] = os.environ['PKG_CONFIG_PATH']
-if not os.environ.has_key('PKG_CONFIG_PATH') and env['PLATFORM'] == 'darwin':
+if not os.environ.get('PKG_CONFIG_PATH') and env['PLATFORM'] == 'darwin':
   env['ENV']['PKG_CONFIG_PATH'] = "/usr/local/lib/pkgconfig:/opt/X11/lib/pkgconfig"
-if os.environ.has_key('PKG_CONFIG_LIBDIR'):
+if os.environ.get('PKG_CONFIG_LIBDIR'):
   env['ENV']['PKG_CONFIG_LIBDIR'] = os.environ['PKG_CONFIG_LIBDIR']

-print "platform: ", env['PLATFORM']
+print ("platform: ", env['PLATFORM'])

 # compile with clang
 if env['CLANG']:
@@ -104,18 +104,18 @@ else:
     assert conf.CheckLibWithHeader('z', 'zlib.h', 'c', 'inflate;', 1), "please install: zlib"
   if env['SDL2']:
     if not conf.CheckLib('SDL2'):
-      print 'Did not find libSDL2 or SDL2.lib, exiting!'
+      print ('Did not find libSDL2 or SDL2.lib, exiting!')
       Exit(1)
     env.Append(CPPDEFINES=["_SDL2"])
     env.ParseConfig('pkg-config sdl2 --cflags --libs')
   else:
     if not conf.CheckLib('SDL'):
-      print 'Did not find libSDL or SDL.lib, exiting!'
+      print ('Did not find libSDL or SDL.lib, exiting!')
       Exit(1)
     env.ParseConfig('sdl-config --cflags --libs')
   if env['GTK']:
     if not conf.CheckLib('gtk-x11-2.0'):
-      print 'Could not find libgtk-2.0, exiting!'
+      print ('Could not find libgtk-2.0, exiting!')
       Exit(1)
     # Add compiler and linker flags from pkg-config
     config_string = 'pkg-config --cflags --libs gtk+-2.0'
@@ -163,7 +163,7 @@ else:
         lua_include_dir = os.environ['LUA_INCDIR']

       if not lua_link_flags or not lua_include_dir:
-        print 'Could not find liblua, exiting!'
+        print ('Could not find liblua, exiting!')
         Exit(1)

       env.Append(LINKFLAGS = lua_link_flags.split())
@@ -179,7 +179,7 @@ else:
     gd = conf.CheckLib('gd', autoadd=1)
     if gd == 0:
       env['LOGO'] = 0
-      print 'Did not find libgd, you won\'t be able to create a logo screen for your avis.'
+      print ('Did not find libgd, you won\'t be able to create a logo screen for your avis.')
    
   if env['OPENGL'] and conf.CheckLibWithHeader('GL', 'GL/gl.h', 'c', autoadd=1):
     conf.env.Append(CCFLAGS = "-DOPENGL")
@@ -193,8 +193,8 @@ if sys.byteorder == 'little' or env['PLA
 if env['FRAMESKIP']:
   env.Append(CPPDEFINES = ['FRAMESKIP'])
 
-print "base CPPDEFINES:",env['CPPDEFINES']
-print "base CCFLAGS:",env['CCFLAGS']
+print ("base CPPDEFINES:",env['CPPDEFINES'])
+print ("base CCFLAGS:",env['CCFLAGS'])
 
 if env['DEBUG']:
   env.Append(CPPDEFINES=["_DEBUG"], CCFLAGS = ['-g', '-O0'])
--- fceux-2.2.3/src/SConscript.orig    2019-07-26 18:08:11.297535443 +0000
+++ fceux-2.2.3/src/SConscript 2019-07-26 18:08:33.857781956 +0000
@@ -33,7 +33,7 @@
   platform_files = SConscript('drivers/sdl/SConscript')
 file_list.append(platform_files)
 
-print env['LINKFLAGS']
+print (env['LINKFLAGS'])
 
 if env['PLATFORM'] == 'win32':
   fceux = env.Program('fceux.exe', file_list)

