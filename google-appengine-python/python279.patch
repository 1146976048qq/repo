--- ./lib/fancy_urllib/fancy_urllib/__init__.py
+++ /tmp/rsk/google_appengine/lib/fancy_urllib/fancy_urllib/__init__.py
@@ -384,7 +384,7 @@ class FancyProxyHandler(urllib2.ProxyHandler):
 class FancyHTTPSHandler(urllib2.HTTPSHandler):
   """An HTTPSHandler that works with CONNECT-enabled proxies."""

-  def do_open(self, http_class, req):
+  def do_open(self, http_class, req, **http_conn_args):
     proxy_authorization = None
     for header in req.headers:
       if header.lower() == "proxy-authorization":
@@ -401,7 +401,8 @@ class FancyHTTPSHandler(urllib2.HTTPSHandler):
                                   req._cert_file,
                                   req._ca_certs,
                                   proxy_authorization),
-          req)
+          req,
+          **http_conn_args)
     except urllib2.URLError, url_error:
       try:
         import ssl
--- ./google/appengine/dist27/gae_override/httplib.py	2014-11-30 18:11:32.000000000 -0800
+++ /tmp/rsk/google_appengine/google/appengine/dist27/gae_override/httplib.py	2015-01-15 16:44:16.000000000 -0800
@@ -353,7 +353,8 @@
   _follow_redirects = False
 
   def __init__(self, host, port=None, strict=None,
-               timeout=_GLOBAL_DEFAULT_TIMEOUT, source_address=None):
+               timeout=_GLOBAL_DEFAULT_TIMEOUT, source_address=None,
+               context=None):
     # net.proto.ProcotolBuffer relies on httplib so importing urlfetch at the
     # module level causes a failure on prod. That means the import needs to be
     # lazy.
@@ -551,7 +552,7 @@
 
   def __init__(self, host, port=None, key_file=None, cert_file=None,
                strict=False, timeout=_GLOBAL_DEFAULT_TIMEOUT,
-               source_address=None):
+               source_address=None, context=None):
     if key_file is not None or cert_file is not None:
       raise NotImplementedError(
           'key_file and cert_file arguments are not implemented')
